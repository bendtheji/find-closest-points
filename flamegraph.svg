<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="4875"><g><title>find_closest_points`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (294 samples, 6.03%)</title><rect x="3.0359%" y="501" width="6.0308%" height="15" fill="rgb(227,0,7)" fg:x="148" fg:w="294"/><text x="3.2859%" y="511.50">find_clo..</text></g><g><title>find_closest_points`DYLD-STUB$$memcpy (2 samples, 0.04%)</title><rect x="9.0667%" y="501" width="0.0410%" height="15" fill="rgb(217,0,24)" fg:x="442" fg:w="2"/><text x="9.3167%" y="511.50"></text></g><g><title>find_closest_points`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="9.1077%" y="501" width="0.0205%" height="15" fill="rgb(221,193,54)" fg:x="444" fg:w="1"/><text x="9.3577%" y="511.50"></text></g><g><title>find_closest_points`core::panicking::assert_failed (1 samples, 0.02%)</title><rect x="9.1282%" y="501" width="0.0205%" height="15" fill="rgb(248,212,6)" fg:x="445" fg:w="1"/><text x="9.3782%" y="511.50"></text></g><g><title>find_closest_points`core::result::unwrap_failed (1 samples, 0.02%)</title><rect x="9.1282%" y="485" width="0.0205%" height="15" fill="rgb(208,68,35)" fg:x="445" fg:w="1"/><text x="9.3782%" y="495.50"></text></g><g><title>find_closest_points`core::panicking::panic_nounwind_fmt (1 samples, 0.02%)</title><rect x="9.1282%" y="469" width="0.0205%" height="15" fill="rgb(232,128,0)" fg:x="445" fg:w="1"/><text x="9.3782%" y="479.50"></text></g><g><title>find_closest_points`&lt;std::panicking::begin_panic_handler::FormatStringPayload as core::panic::PanicPayload&gt;::take_box (1 samples, 0.02%)</title><rect x="9.1282%" y="453" width="0.0205%" height="15" fill="rgb(207,160,47)" fg:x="445" fg:w="1"/><text x="9.3782%" y="463.50"></text></g><g><title>find_closest_points`std::sys_common::backtrace::output_filename (1 samples, 0.02%)</title><rect x="9.1282%" y="437" width="0.0205%" height="15" fill="rgb(228,23,34)" fg:x="445" fg:w="1"/><text x="9.3782%" y="447.50"></text></g><g><title>find_closest_points`std::panicking::begin_panic_handler::_{{closure}} (1 samples, 0.02%)</title><rect x="9.1282%" y="421" width="0.0205%" height="15" fill="rgb(218,30,26)" fg:x="445" fg:w="1"/><text x="9.3782%" y="431.50"></text></g><g><title>find_closest_points`std::panicking::rust_panic_with_hook (1 samples, 0.02%)</title><rect x="9.1282%" y="405" width="0.0205%" height="15" fill="rgb(220,122,19)" fg:x="445" fg:w="1"/><text x="9.3782%" y="415.50"></text></g><g><title>find_closest_points`rust_panic (1 samples, 0.02%)</title><rect x="9.1282%" y="389" width="0.0205%" height="15" fill="rgb(250,228,42)" fg:x="445" fg:w="1"/><text x="9.3782%" y="399.50"></text></g><g><title>libunwind.dylib`_Unwind_RaiseException (1 samples, 0.02%)</title><rect x="9.1282%" y="373" width="0.0205%" height="15" fill="rgb(240,193,28)" fg:x="445" fg:w="1"/><text x="9.3782%" y="383.50"></text></g><g><title>libunwind.dylib`libunwind::UnwindCursor&lt;libunwind::LocalAddressSpace, libunwind::Registers_arm64&gt;::step (1 samples, 0.02%)</title><rect x="9.1282%" y="357" width="0.0205%" height="15" fill="rgb(216,20,37)" fg:x="445" fg:w="1"/><text x="9.3782%" y="367.50"></text></g><g><title>libunwind.dylib`libunwind::UnwindCursor&lt;libunwind::LocalAddressSpace, libunwind::Registers_arm64&gt;::setInfoBasedOnIPRegister (1 samples, 0.02%)</title><rect x="9.1282%" y="341" width="0.0205%" height="15" fill="rgb(206,188,39)" fg:x="445" fg:w="1"/><text x="9.3782%" y="351.50"></text></g><g><title>find_closest_points`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="10.0308%" y="197" width="0.0205%" height="15" fill="rgb(217,207,13)" fg:x="489" fg:w="1"/><text x="10.2808%" y="207.50"></text></g><g><title>find_closest_points`DYLD-STUB$$free (3 samples, 0.06%)</title><rect x="10.1949%" y="165" width="0.0615%" height="15" fill="rgb(231,73,38)" fg:x="497" fg:w="3"/><text x="10.4449%" y="175.50"></text></g><g><title>find_closest_points`__rdl_dealloc (3 samples, 0.06%)</title><rect x="10.2564%" y="165" width="0.0615%" height="15" fill="rgb(225,20,46)" fg:x="500" fg:w="3"/><text x="10.5064%" y="175.50"></text></g><g><title>find_closest_points`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="10.4615%" y="149" width="0.0205%" height="15" fill="rgb(210,31,41)" fg:x="510" fg:w="1"/><text x="10.7115%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="11.0359%" y="133" width="0.0205%" height="15" fill="rgb(221,200,47)" fg:x="538" fg:w="1"/><text x="11.2859%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.12%)</title><rect x="11.0564%" y="133" width="0.1231%" height="15" fill="rgb(226,26,5)" fg:x="539" fg:w="6"/><text x="11.3064%" y="143.50"></text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (39 samples, 0.80%)</title><rect x="10.4821%" y="149" width="0.8000%" height="15" fill="rgb(249,33,26)" fg:x="511" fg:w="39"/><text x="10.7321%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.10%)</title><rect x="11.1795%" y="133" width="0.1026%" height="15" fill="rgb(235,183,28)" fg:x="545" fg:w="5"/><text x="11.4295%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (5 samples, 0.10%)</title><rect x="11.1795%" y="117" width="0.1026%" height="15" fill="rgb(221,5,38)" fg:x="545" fg:w="5"/><text x="11.4295%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.10%)</title><rect x="11.1795%" y="101" width="0.1026%" height="15" fill="rgb(247,18,42)" fg:x="545" fg:w="5"/><text x="11.4295%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (19 samples, 0.39%)</title><rect x="11.2821%" y="149" width="0.3897%" height="15" fill="rgb(241,131,45)" fg:x="550" fg:w="19"/><text x="11.5321%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.10%)</title><rect x="11.6718%" y="149" width="0.1026%" height="15" fill="rgb(249,31,29)" fg:x="569" fg:w="5"/><text x="11.9218%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (8 samples, 0.16%)</title><rect x="11.7744%" y="149" width="0.1641%" height="15" fill="rgb(225,111,53)" fg:x="574" fg:w="8"/><text x="12.0244%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (8 samples, 0.16%)</title><rect x="11.7744%" y="133" width="0.1641%" height="15" fill="rgb(238,160,17)" fg:x="574" fg:w="8"/><text x="12.0244%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.16%)</title><rect x="11.7744%" y="117" width="0.1641%" height="15" fill="rgb(214,148,48)" fg:x="574" fg:w="8"/><text x="12.0244%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="11.9385%" y="149" width="0.0205%" height="15" fill="rgb(232,36,49)" fg:x="582" fg:w="1"/><text x="12.1885%" y="159.50"></text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (86 samples, 1.76%)</title><rect x="10.3179%" y="165" width="1.7641%" height="15" fill="rgb(209,103,24)" fg:x="503" fg:w="86"/><text x="10.5679%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.12%)</title><rect x="11.9590%" y="149" width="0.1231%" height="15" fill="rgb(229,88,8)" fg:x="583" fg:w="6"/><text x="12.2090%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.18%)</title><rect x="12.0821%" y="165" width="0.1846%" height="15" fill="rgb(213,181,19)" fg:x="589" fg:w="9"/><text x="12.3321%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.21%)</title><rect x="12.2667%" y="165" width="0.2051%" height="15" fill="rgb(254,191,54)" fg:x="598" fg:w="10"/><text x="12.5167%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.10%)</title><rect x="12.4718%" y="165" width="0.1026%" height="15" fill="rgb(241,83,37)" fg:x="608" fg:w="5"/><text x="12.7218%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (5 samples, 0.10%)</title><rect x="12.4718%" y="149" width="0.1026%" height="15" fill="rgb(233,36,39)" fg:x="608" fg:w="5"/><text x="12.7218%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.10%)</title><rect x="12.4718%" y="133" width="0.1026%" height="15" fill="rgb(226,3,54)" fg:x="608" fg:w="5"/><text x="12.7218%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="12.5744%" y="165" width="0.0205%" height="15" fill="rgb(245,192,40)" fg:x="613" fg:w="1"/><text x="12.8244%" y="175.50"></text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (123 samples, 2.52%)</title><rect x="10.0923%" y="181" width="2.5231%" height="15" fill="rgb(238,167,29)" fg:x="492" fg:w="123"/><text x="10.3423%" y="191.50">fi..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="12.5949%" y="165" width="0.0205%" height="15" fill="rgb(232,182,51)" fg:x="614" fg:w="1"/><text x="12.8449%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="12.6154%" y="181" width="0.0205%" height="15" fill="rgb(231,60,39)" fg:x="615" fg:w="1"/><text x="12.8654%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.21%)</title><rect x="12.6359%" y="181" width="0.2051%" height="15" fill="rgb(208,69,12)" fg:x="616" fg:w="10"/><text x="12.8859%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.10%)</title><rect x="12.8410%" y="181" width="0.1026%" height="15" fill="rgb(235,93,37)" fg:x="626" fg:w="5"/><text x="13.0910%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.04%)</title><rect x="12.9436%" y="181" width="0.0410%" height="15" fill="rgb(213,116,39)" fg:x="631" fg:w="2"/><text x="13.1936%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.04%)</title><rect x="12.9436%" y="165" width="0.0410%" height="15" fill="rgb(222,207,29)" fg:x="631" fg:w="2"/><text x="13.1936%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="12.9436%" y="149" width="0.0410%" height="15" fill="rgb(206,96,30)" fg:x="631" fg:w="2"/><text x="13.1936%" y="159.50"></text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (144 samples, 2.95%)</title><rect x="10.0513%" y="197" width="2.9538%" height="15" fill="rgb(218,138,4)" fg:x="490" fg:w="144"/><text x="10.3013%" y="207.50">fin..</text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="12.9846%" y="181" width="0.0205%" height="15" fill="rgb(250,191,14)" fg:x="633" fg:w="1"/><text x="13.2346%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.06%)</title><rect x="13.0051%" y="197" width="0.0615%" height="15" fill="rgb(239,60,40)" fg:x="634" fg:w="3"/><text x="13.2551%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.08%)</title><rect x="13.0667%" y="197" width="0.0821%" height="15" fill="rgb(206,27,48)" fg:x="637" fg:w="4"/><text x="13.3167%" y="207.50"></text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (155 samples, 3.18%)</title><rect x="9.9897%" y="213" width="3.1795%" height="15" fill="rgb(225,35,8)" fg:x="487" fg:w="155"/><text x="10.2397%" y="223.50">fin..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="13.1487%" y="197" width="0.0205%" height="15" fill="rgb(250,213,24)" fg:x="641" fg:w="1"/><text x="13.3987%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.10%)</title><rect x="13.1692%" y="213" width="0.1026%" height="15" fill="rgb(247,123,22)" fg:x="642" fg:w="5"/><text x="13.4192%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="13.2718%" y="213" width="0.0410%" height="15" fill="rgb(231,138,38)" fg:x="647" fg:w="2"/><text x="13.5218%" y="223.50"></text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (163 samples, 3.34%)</title><rect x="9.9897%" y="229" width="3.3436%" height="15" fill="rgb(231,145,46)" fg:x="487" fg:w="163"/><text x="10.2397%" y="239.50">fin..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.02%)</title><rect x="13.3128%" y="213" width="0.0205%" height="15" fill="rgb(251,118,11)" fg:x="649" fg:w="1"/><text x="13.5628%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.02%)</title><rect x="13.3128%" y="197" width="0.0205%" height="15" fill="rgb(217,147,25)" fg:x="649" fg:w="1"/><text x="13.5628%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="13.3128%" y="181" width="0.0205%" height="15" fill="rgb(247,81,37)" fg:x="649" fg:w="1"/><text x="13.5628%" y="191.50"></text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (164 samples, 3.36%)</title><rect x="9.9897%" y="245" width="3.3641%" height="15" fill="rgb(209,12,38)" fg:x="487" fg:w="164"/><text x="10.2397%" y="255.50">fin..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.02%)</title><rect x="13.3333%" y="229" width="0.0205%" height="15" fill="rgb(227,1,9)" fg:x="650" fg:w="1"/><text x="13.5833%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.02%)</title><rect x="13.3333%" y="213" width="0.0205%" height="15" fill="rgb(248,47,43)" fg:x="650" fg:w="1"/><text x="13.5833%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="13.3333%" y="197" width="0.0205%" height="15" fill="rgb(221,10,30)" fg:x="650" fg:w="1"/><text x="13.5833%" y="207.50"></text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (206 samples, 4.23%)</title><rect x="9.1487%" y="501" width="4.2256%" height="15" fill="rgb(210,229,1)" fg:x="446" fg:w="206"/><text x="9.3987%" y="511.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (206 samples, 4.23%)</title><rect x="9.1487%" y="485" width="4.2256%" height="15" fill="rgb(222,148,37)" fg:x="446" fg:w="206"/><text x="9.3987%" y="495.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (206 samples, 4.23%)</title><rect x="9.1487%" y="469" width="4.2256%" height="15" fill="rgb(234,67,33)" fg:x="446" fg:w="206"/><text x="9.3987%" y="479.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (206 samples, 4.23%)</title><rect x="9.1487%" y="453" width="4.2256%" height="15" fill="rgb(247,98,35)" fg:x="446" fg:w="206"/><text x="9.3987%" y="463.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (206 samples, 4.23%)</title><rect x="9.1487%" y="437" width="4.2256%" height="15" fill="rgb(247,138,52)" fg:x="446" fg:w="206"/><text x="9.3987%" y="447.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (206 samples, 4.23%)</title><rect x="9.1487%" y="421" width="4.2256%" height="15" fill="rgb(213,79,30)" fg:x="446" fg:w="206"/><text x="9.3987%" y="431.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (206 samples, 4.23%)</title><rect x="9.1487%" y="405" width="4.2256%" height="15" fill="rgb(246,177,23)" fg:x="446" fg:w="206"/><text x="9.3987%" y="415.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (206 samples, 4.23%)</title><rect x="9.1487%" y="389" width="4.2256%" height="15" fill="rgb(230,62,27)" fg:x="446" fg:w="206"/><text x="9.3987%" y="399.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (206 samples, 4.23%)</title><rect x="9.1487%" y="373" width="4.2256%" height="15" fill="rgb(216,154,8)" fg:x="446" fg:w="206"/><text x="9.3987%" y="383.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (204 samples, 4.18%)</title><rect x="9.1897%" y="357" width="4.1846%" height="15" fill="rgb(244,35,45)" fg:x="448" fg:w="204"/><text x="9.4397%" y="367.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (203 samples, 4.16%)</title><rect x="9.2103%" y="341" width="4.1641%" height="15" fill="rgb(251,115,12)" fg:x="449" fg:w="203"/><text x="9.4603%" y="351.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (202 samples, 4.14%)</title><rect x="9.2308%" y="325" width="4.1436%" height="15" fill="rgb(240,54,50)" fg:x="450" fg:w="202"/><text x="9.4808%" y="335.50">find_..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (200 samples, 4.10%)</title><rect x="9.2718%" y="309" width="4.1026%" height="15" fill="rgb(233,84,52)" fg:x="452" fg:w="200"/><text x="9.5218%" y="319.50">find..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (197 samples, 4.04%)</title><rect x="9.3333%" y="293" width="4.0410%" height="15" fill="rgb(207,117,47)" fg:x="455" fg:w="197"/><text x="9.5833%" y="303.50">find..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (195 samples, 4.00%)</title><rect x="9.3744%" y="277" width="4.0000%" height="15" fill="rgb(249,43,39)" fg:x="457" fg:w="195"/><text x="9.6244%" y="287.50">find..</text></g><g><title>find_closest_points`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;find_closest_points::kd_tree::KdTreeNode&gt;&gt; (188 samples, 3.86%)</title><rect x="9.5179%" y="261" width="3.8564%" height="15" fill="rgb(209,38,44)" fg:x="464" fg:w="188"/><text x="9.7679%" y="271.50">find..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="13.3538%" y="245" width="0.0205%" height="15" fill="rgb(236,212,23)" fg:x="651" fg:w="1"/><text x="13.6038%" y="255.50"></text></g><g><title>find_closest_points`core::slice::sort::merge_sort (991 samples, 20.33%)</title><rect x="13.3744%" y="501" width="20.3282%" height="15" fill="rgb(242,79,21)" fg:x="652" fg:w="991"/><text x="13.6244%" y="511.50">find_closest_points`core::slice:..</text></g><g><title>find_closest_points`core::slice::sort::insertion_sort_shift_left (97 samples, 1.99%)</title><rect x="31.7128%" y="485" width="1.9897%" height="15" fill="rgb(211,96,35)" fg:x="1546" fg:w="97"/><text x="31.9628%" y="495.50">f..</text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="36.0410%" y="469" width="0.0205%" height="15" fill="rgb(253,215,40)" fg:x="1757" fg:w="1"/><text x="36.2910%" y="479.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="36.0410%" y="453" width="0.0205%" height="15" fill="rgb(211,81,21)" fg:x="1757" fg:w="1"/><text x="36.2910%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="36.0410%" y="437" width="0.0205%" height="15" fill="rgb(208,190,38)" fg:x="1757" fg:w="1"/><text x="36.2910%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.02%)</title><rect x="36.0410%" y="421" width="0.0205%" height="15" fill="rgb(235,213,38)" fg:x="1757" fg:w="1"/><text x="36.2910%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="36.0410%" y="405" width="0.0205%" height="15" fill="rgb(237,122,38)" fg:x="1757" fg:w="1"/><text x="36.2910%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.02%)</title><rect x="36.0410%" y="389" width="0.0205%" height="15" fill="rgb(244,218,35)" fg:x="1757" fg:w="1"/><text x="36.2910%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.02%)</title><rect x="36.0410%" y="373" width="0.0205%" height="15" fill="rgb(240,68,47)" fg:x="1757" fg:w="1"/><text x="36.2910%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="38.7897%" y="389" width="0.0205%" height="15" fill="rgb(210,16,53)" fg:x="1891" fg:w="1"/><text x="39.0397%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.02%)</title><rect x="38.7897%" y="373" width="0.0205%" height="15" fill="rgb(235,124,12)" fg:x="1891" fg:w="1"/><text x="39.0397%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.02%)</title><rect x="38.7897%" y="357" width="0.0205%" height="15" fill="rgb(224,169,11)" fg:x="1891" fg:w="1"/><text x="39.0397%" y="367.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.04%)</title><rect x="38.7897%" y="453" width="0.0410%" height="15" fill="rgb(250,166,2)" fg:x="1891" fg:w="2"/><text x="39.0397%" y="463.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="38.7897%" y="437" width="0.0410%" height="15" fill="rgb(242,216,29)" fg:x="1891" fg:w="2"/><text x="39.0397%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.04%)</title><rect x="38.7897%" y="421" width="0.0410%" height="15" fill="rgb(230,116,27)" fg:x="1891" fg:w="2"/><text x="39.0397%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.04%)</title><rect x="38.7897%" y="405" width="0.0410%" height="15" fill="rgb(228,99,48)" fg:x="1891" fg:w="2"/><text x="39.0397%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="38.8103%" y="389" width="0.0205%" height="15" fill="rgb(253,11,6)" fg:x="1892" fg:w="1"/><text x="39.0603%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="41.3949%" y="357" width="0.0205%" height="15" fill="rgb(247,143,39)" fg:x="2018" fg:w="1"/><text x="41.6449%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="41.3949%" y="341" width="0.0205%" height="15" fill="rgb(236,97,10)" fg:x="2018" fg:w="1"/><text x="41.6449%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.04%)</title><rect x="41.3949%" y="373" width="0.0410%" height="15" fill="rgb(233,208,19)" fg:x="2018" fg:w="2"/><text x="41.6449%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (1 samples, 0.02%)</title><rect x="41.4154%" y="357" width="0.0205%" height="15" fill="rgb(216,164,2)" fg:x="2019" fg:w="1"/><text x="41.6654%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (1 samples, 0.02%)</title><rect x="41.4154%" y="341" width="0.0205%" height="15" fill="rgb(220,129,5)" fg:x="2019" fg:w="1"/><text x="41.6654%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (1 samples, 0.02%)</title><rect x="41.4154%" y="325" width="0.0205%" height="15" fill="rgb(242,17,10)" fg:x="2019" fg:w="1"/><text x="41.6654%" y="335.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.08%)</title><rect x="41.3949%" y="437" width="0.0821%" height="15" fill="rgb(242,107,0)" fg:x="2018" fg:w="4"/><text x="41.6449%" y="447.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (4 samples, 0.08%)</title><rect x="41.3949%" y="421" width="0.0821%" height="15" fill="rgb(251,28,31)" fg:x="2018" fg:w="4"/><text x="41.6449%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.08%)</title><rect x="41.3949%" y="405" width="0.0821%" height="15" fill="rgb(233,223,10)" fg:x="2018" fg:w="4"/><text x="41.6449%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.08%)</title><rect x="41.3949%" y="389" width="0.0821%" height="15" fill="rgb(215,21,27)" fg:x="2018" fg:w="4"/><text x="41.6449%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="41.4359%" y="373" width="0.0410%" height="15" fill="rgb(232,23,21)" fg:x="2020" fg:w="2"/><text x="41.6859%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="44.0410%" y="357" width="0.0205%" height="15" fill="rgb(244,5,23)" fg:x="2147" fg:w="1"/><text x="44.2910%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="44.0410%" y="341" width="0.0205%" height="15" fill="rgb(226,81,46)" fg:x="2147" fg:w="1"/><text x="44.2910%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="44.0410%" y="325" width="0.0205%" height="15" fill="rgb(247,70,30)" fg:x="2147" fg:w="1"/><text x="44.2910%" y="335.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.04%)</title><rect x="44.0410%" y="421" width="0.0410%" height="15" fill="rgb(212,68,19)" fg:x="2147" fg:w="2"/><text x="44.2910%" y="431.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="44.0410%" y="405" width="0.0410%" height="15" fill="rgb(240,187,13)" fg:x="2147" fg:w="2"/><text x="44.2910%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.04%)</title><rect x="44.0410%" y="389" width="0.0410%" height="15" fill="rgb(223,113,26)" fg:x="2147" fg:w="2"/><text x="44.2910%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.04%)</title><rect x="44.0410%" y="373" width="0.0410%" height="15" fill="rgb(206,192,2)" fg:x="2147" fg:w="2"/><text x="44.2910%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="44.0615%" y="357" width="0.0205%" height="15" fill="rgb(241,108,4)" fg:x="2148" fg:w="1"/><text x="44.3115%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.02%)</title><rect x="46.5641%" y="325" width="0.0205%" height="15" fill="rgb(247,173,49)" fg:x="2270" fg:w="1"/><text x="46.8141%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.02%)</title><rect x="46.5641%" y="309" width="0.0205%" height="15" fill="rgb(224,114,35)" fg:x="2270" fg:w="1"/><text x="46.8141%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.04%)</title><rect x="46.5641%" y="341" width="0.0410%" height="15" fill="rgb(245,159,27)" fg:x="2270" fg:w="2"/><text x="46.8141%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="46.5846%" y="325" width="0.0205%" height="15" fill="rgb(245,172,44)" fg:x="2271" fg:w="1"/><text x="46.8346%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="46.5846%" y="309" width="0.0205%" height="15" fill="rgb(236,23,11)" fg:x="2271" fg:w="1"/><text x="46.8346%" y="319.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.18%)</title><rect x="46.5641%" y="405" width="0.1846%" height="15" fill="rgb(205,117,38)" fg:x="2270" fg:w="9"/><text x="46.8141%" y="415.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (9 samples, 0.18%)</title><rect x="46.5641%" y="389" width="0.1846%" height="15" fill="rgb(237,72,25)" fg:x="2270" fg:w="9"/><text x="46.8141%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.18%)</title><rect x="46.5641%" y="373" width="0.1846%" height="15" fill="rgb(244,70,9)" fg:x="2270" fg:w="9"/><text x="46.8141%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.18%)</title><rect x="46.5641%" y="357" width="0.1846%" height="15" fill="rgb(217,125,39)" fg:x="2270" fg:w="9"/><text x="46.8141%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.14%)</title><rect x="46.6051%" y="341" width="0.1436%" height="15" fill="rgb(235,36,10)" fg:x="2272" fg:w="7"/><text x="46.8551%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (2 samples, 0.04%)</title><rect x="49.2103%" y="309" width="0.0410%" height="15" fill="rgb(251,123,47)" fg:x="2399" fg:w="2"/><text x="49.4603%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (2 samples, 0.04%)</title><rect x="49.2103%" y="293" width="0.0410%" height="15" fill="rgb(221,13,13)" fg:x="2399" fg:w="2"/><text x="49.4603%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.08%)</title><rect x="49.2103%" y="325" width="0.0821%" height="15" fill="rgb(238,131,9)" fg:x="2399" fg:w="4"/><text x="49.4603%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.04%)</title><rect x="49.2513%" y="309" width="0.0410%" height="15" fill="rgb(211,50,8)" fg:x="2401" fg:w="2"/><text x="49.5013%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="49.2513%" y="293" width="0.0410%" height="15" fill="rgb(245,182,24)" fg:x="2401" fg:w="2"/><text x="49.5013%" y="303.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 0.37%)</title><rect x="49.2103%" y="389" width="0.3692%" height="15" fill="rgb(242,14,37)" fg:x="2399" fg:w="18"/><text x="49.4603%" y="399.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (18 samples, 0.37%)</title><rect x="49.2103%" y="373" width="0.3692%" height="15" fill="rgb(246,228,12)" fg:x="2399" fg:w="18"/><text x="49.4603%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.37%)</title><rect x="49.2103%" y="357" width="0.3692%" height="15" fill="rgb(213,55,15)" fg:x="2399" fg:w="18"/><text x="49.4603%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.37%)</title><rect x="49.2103%" y="341" width="0.3692%" height="15" fill="rgb(209,9,3)" fg:x="2399" fg:w="18"/><text x="49.4603%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.29%)</title><rect x="49.2923%" y="325" width="0.2872%" height="15" fill="rgb(230,59,30)" fg:x="2403" fg:w="14"/><text x="49.5423%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="51.4667%" y="293" width="0.0205%" height="15" fill="rgb(209,121,21)" fg:x="2509" fg:w="1"/><text x="51.7167%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="51.4667%" y="277" width="0.0205%" height="15" fill="rgb(220,109,13)" fg:x="2509" fg:w="1"/><text x="51.7167%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.04%)</title><rect x="51.4667%" y="309" width="0.0410%" height="15" fill="rgb(232,18,1)" fg:x="2509" fg:w="2"/><text x="51.7167%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="51.4872%" y="293" width="0.0205%" height="15" fill="rgb(215,41,42)" fg:x="2510" fg:w="1"/><text x="51.7372%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="51.4872%" y="277" width="0.0205%" height="15" fill="rgb(224,123,36)" fg:x="2510" fg:w="1"/><text x="51.7372%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="51.4872%" y="261" width="0.0205%" height="15" fill="rgb(240,125,3)" fg:x="2510" fg:w="1"/><text x="51.7372%" y="271.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (32 samples, 0.66%)</title><rect x="51.4667%" y="373" width="0.6564%" height="15" fill="rgb(205,98,50)" fg:x="2509" fg:w="32"/><text x="51.7167%" y="383.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (32 samples, 0.66%)</title><rect x="51.4667%" y="357" width="0.6564%" height="15" fill="rgb(205,185,37)" fg:x="2509" fg:w="32"/><text x="51.7167%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`realloc (32 samples, 0.66%)</title><rect x="51.4667%" y="341" width="0.6564%" height="15" fill="rgb(238,207,15)" fg:x="2509" fg:w="32"/><text x="51.7167%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (32 samples, 0.66%)</title><rect x="51.4667%" y="325" width="0.6564%" height="15" fill="rgb(213,199,42)" fg:x="2509" fg:w="32"/><text x="51.7167%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.62%)</title><rect x="51.5077%" y="309" width="0.6154%" height="15" fill="rgb(235,201,11)" fg:x="2511" fg:w="30"/><text x="51.7577%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="53.9077%" y="293" width="0.0205%" height="15" fill="rgb(207,46,11)" fg:x="2628" fg:w="1"/><text x="54.1577%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.10%)</title><rect x="53.9282%" y="293" width="0.1026%" height="15" fill="rgb(241,35,35)" fg:x="2629" fg:w="5"/><text x="54.1782%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.10%)</title><rect x="53.9282%" y="277" width="0.1026%" height="15" fill="rgb(243,32,47)" fg:x="2629" fg:w="5"/><text x="54.1782%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.10%)</title><rect x="53.9282%" y="261" width="0.1026%" height="15" fill="rgb(247,202,23)" fg:x="2629" fg:w="5"/><text x="54.1782%" y="271.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (27 samples, 0.55%)</title><rect x="53.9077%" y="357" width="0.5538%" height="15" fill="rgb(219,102,11)" fg:x="2628" fg:w="27"/><text x="54.1577%" y="367.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (27 samples, 0.55%)</title><rect x="53.9077%" y="341" width="0.5538%" height="15" fill="rgb(243,110,44)" fg:x="2628" fg:w="27"/><text x="54.1577%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`realloc (27 samples, 0.55%)</title><rect x="53.9077%" y="325" width="0.5538%" height="15" fill="rgb(222,74,54)" fg:x="2628" fg:w="27"/><text x="54.1577%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (27 samples, 0.55%)</title><rect x="53.9077%" y="309" width="0.5538%" height="15" fill="rgb(216,99,12)" fg:x="2628" fg:w="27"/><text x="54.1577%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.43%)</title><rect x="54.0308%" y="293" width="0.4308%" height="15" fill="rgb(226,22,26)" fg:x="2634" fg:w="21"/><text x="54.2808%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.04%)</title><rect x="56.4513%" y="277" width="0.0410%" height="15" fill="rgb(217,163,10)" fg:x="2752" fg:w="2"/><text x="56.7013%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.04%)</title><rect x="56.4513%" y="261" width="0.0410%" height="15" fill="rgb(213,25,53)" fg:x="2752" fg:w="2"/><text x="56.7013%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="56.4513%" y="245" width="0.0410%" height="15" fill="rgb(252,105,26)" fg:x="2752" fg:w="2"/><text x="56.7013%" y="255.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.21%)</title><rect x="56.4308%" y="341" width="0.2051%" height="15" fill="rgb(220,39,43)" fg:x="2751" fg:w="10"/><text x="56.6808%" y="351.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (10 samples, 0.21%)</title><rect x="56.4308%" y="325" width="0.2051%" height="15" fill="rgb(229,68,48)" fg:x="2751" fg:w="10"/><text x="56.6808%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.21%)</title><rect x="56.4308%" y="309" width="0.2051%" height="15" fill="rgb(252,8,32)" fg:x="2751" fg:w="10"/><text x="56.6808%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.21%)</title><rect x="56.4308%" y="293" width="0.2051%" height="15" fill="rgb(223,20,43)" fg:x="2751" fg:w="10"/><text x="56.6808%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.14%)</title><rect x="56.4923%" y="277" width="0.1436%" height="15" fill="rgb(229,81,49)" fg:x="2754" fg:w="7"/><text x="56.7423%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="58.0513%" y="261" width="0.0205%" height="15" fill="rgb(236,28,36)" fg:x="2830" fg:w="1"/><text x="58.3013%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="58.0513%" y="245" width="0.0205%" height="15" fill="rgb(249,185,26)" fg:x="2830" fg:w="1"/><text x="58.3013%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.14%)</title><rect x="58.0718%" y="261" width="0.1436%" height="15" fill="rgb(249,174,33)" fg:x="2831" fg:w="7"/><text x="58.3218%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.14%)</title><rect x="58.0718%" y="245" width="0.1436%" height="15" fill="rgb(233,201,37)" fg:x="2831" fg:w="7"/><text x="58.3218%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.14%)</title><rect x="58.0718%" y="229" width="0.1436%" height="15" fill="rgb(221,78,26)" fg:x="2831" fg:w="7"/><text x="58.3218%" y="239.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 0.37%)</title><rect x="58.0513%" y="325" width="0.3692%" height="15" fill="rgb(250,127,30)" fg:x="2830" fg:w="18"/><text x="58.3013%" y="335.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (18 samples, 0.37%)</title><rect x="58.0513%" y="309" width="0.3692%" height="15" fill="rgb(230,49,44)" fg:x="2830" fg:w="18"/><text x="58.3013%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.37%)</title><rect x="58.0513%" y="293" width="0.3692%" height="15" fill="rgb(229,67,23)" fg:x="2830" fg:w="18"/><text x="58.3013%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.37%)</title><rect x="58.0513%" y="277" width="0.3692%" height="15" fill="rgb(249,83,47)" fg:x="2830" fg:w="18"/><text x="58.3013%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.21%)</title><rect x="58.2154%" y="261" width="0.2051%" height="15" fill="rgb(215,43,3)" fg:x="2838" fg:w="10"/><text x="58.4654%" y="271.50"></text></g><g><title>find_closest_points`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="60.0000%" y="293" width="0.0205%" height="15" fill="rgb(238,154,13)" fg:x="2925" fg:w="1"/><text x="60.2500%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.10%)</title><rect x="60.0205%" y="245" width="0.1026%" height="15" fill="rgb(219,56,2)" fg:x="2926" fg:w="5"/><text x="60.2705%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.10%)</title><rect x="60.0205%" y="229" width="0.1026%" height="15" fill="rgb(233,0,4)" fg:x="2926" fg:w="5"/><text x="60.2705%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.10%)</title><rect x="60.0205%" y="213" width="0.1026%" height="15" fill="rgb(235,30,7)" fg:x="2926" fg:w="5"/><text x="60.2705%" y="223.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.27%)</title><rect x="60.0000%" y="309" width="0.2667%" height="15" fill="rgb(250,79,13)" fg:x="2925" fg:w="13"/><text x="60.2500%" y="319.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (12 samples, 0.25%)</title><rect x="60.0205%" y="293" width="0.2462%" height="15" fill="rgb(211,146,34)" fg:x="2926" fg:w="12"/><text x="60.2705%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.25%)</title><rect x="60.0205%" y="277" width="0.2462%" height="15" fill="rgb(228,22,38)" fg:x="2926" fg:w="12"/><text x="60.2705%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.25%)</title><rect x="60.0205%" y="261" width="0.2462%" height="15" fill="rgb(235,168,5)" fg:x="2926" fg:w="12"/><text x="60.2705%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.14%)</title><rect x="60.1231%" y="245" width="0.1436%" height="15" fill="rgb(221,155,16)" fg:x="2931" fg:w="7"/><text x="60.3731%" y="255.50"></text></g><g><title>find_closest_points`__rdl_realloc (1 samples, 0.02%)</title><rect x="61.5795%" y="277" width="0.0205%" height="15" fill="rgb(215,215,53)" fg:x="3002" fg:w="1"/><text x="61.8295%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="61.6410%" y="229" width="0.0205%" height="15" fill="rgb(223,4,10)" fg:x="3005" fg:w="1"/><text x="61.8910%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (6 samples, 0.12%)</title><rect x="61.6615%" y="213" width="0.1231%" height="15" fill="rgb(234,103,6)" fg:x="3006" fg:w="6"/><text x="61.9115%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.12%)</title><rect x="61.6615%" y="197" width="0.1231%" height="15" fill="rgb(227,97,0)" fg:x="3006" fg:w="6"/><text x="61.9115%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="61.7846%" y="213" width="0.0205%" height="15" fill="rgb(234,150,53)" fg:x="3012" fg:w="1"/><text x="62.0346%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.02%)</title><rect x="61.7846%" y="197" width="0.0205%" height="15" fill="rgb(228,201,54)" fg:x="3012" fg:w="1"/><text x="62.0346%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.16%)</title><rect x="61.6615%" y="229" width="0.1641%" height="15" fill="rgb(222,22,37)" fg:x="3006" fg:w="8"/><text x="61.9115%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="61.8051%" y="213" width="0.0205%" height="15" fill="rgb(237,53,32)" fg:x="3013" fg:w="1"/><text x="62.0551%" y="223.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.35%)</title><rect x="61.5795%" y="293" width="0.3487%" height="15" fill="rgb(233,25,53)" fg:x="3002" fg:w="17"/><text x="61.8295%" y="303.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (16 samples, 0.33%)</title><rect x="61.6000%" y="277" width="0.3282%" height="15" fill="rgb(210,40,34)" fg:x="3003" fg:w="16"/><text x="61.8500%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (15 samples, 0.31%)</title><rect x="61.6205%" y="261" width="0.3077%" height="15" fill="rgb(241,220,44)" fg:x="3004" fg:w="15"/><text x="61.8705%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.29%)</title><rect x="61.6410%" y="245" width="0.2872%" height="15" fill="rgb(235,28,35)" fg:x="3005" fg:w="14"/><text x="61.8910%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.10%)</title><rect x="61.8256%" y="229" width="0.1026%" height="15" fill="rgb(210,56,17)" fg:x="3014" fg:w="5"/><text x="62.0756%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="63.5487%" y="197" width="0.0205%" height="15" fill="rgb(224,130,29)" fg:x="3098" fg:w="1"/><text x="63.7987%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="63.5487%" y="181" width="0.0205%" height="15" fill="rgb(235,212,8)" fg:x="3098" fg:w="1"/><text x="63.7987%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.02%)</title><rect x="63.5692%" y="197" width="0.0205%" height="15" fill="rgb(223,33,50)" fg:x="3099" fg:w="1"/><text x="63.8192%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.02%)</title><rect x="63.5897%" y="181" width="0.0205%" height="15" fill="rgb(219,149,13)" fg:x="3100" fg:w="1"/><text x="63.8397%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="63.5897%" y="197" width="0.0410%" height="15" fill="rgb(250,156,29)" fg:x="3100" fg:w="2"/><text x="63.8397%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="63.6103%" y="181" width="0.0205%" height="15" fill="rgb(216,193,19)" fg:x="3101" fg:w="1"/><text x="63.8603%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="63.6103%" y="165" width="0.0205%" height="15" fill="rgb(216,135,14)" fg:x="3101" fg:w="1"/><text x="63.8603%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.10%)</title><rect x="63.5487%" y="213" width="0.1026%" height="15" fill="rgb(241,47,5)" fg:x="3098" fg:w="5"/><text x="63.7987%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="63.6308%" y="197" width="0.0205%" height="15" fill="rgb(233,42,35)" fg:x="3102" fg:w="1"/><text x="63.8808%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.29%)</title><rect x="63.5487%" y="229" width="0.2872%" height="15" fill="rgb(231,13,6)" fg:x="3098" fg:w="14"/><text x="63.7987%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.18%)</title><rect x="63.6513%" y="213" width="0.1846%" height="15" fill="rgb(207,181,40)" fg:x="3103" fg:w="9"/><text x="63.9013%" y="223.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 0.31%)</title><rect x="63.5487%" y="277" width="0.3077%" height="15" fill="rgb(254,173,49)" fg:x="3098" fg:w="15"/><text x="63.7987%" y="287.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (15 samples, 0.31%)</title><rect x="63.5487%" y="261" width="0.3077%" height="15" fill="rgb(221,1,38)" fg:x="3098" fg:w="15"/><text x="63.7987%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (15 samples, 0.31%)</title><rect x="63.5487%" y="245" width="0.3077%" height="15" fill="rgb(206,124,46)" fg:x="3098" fg:w="15"/><text x="63.7987%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="63.8359%" y="229" width="0.0205%" height="15" fill="rgb(249,21,11)" fg:x="3112" fg:w="1"/><text x="64.0859%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="63.8359%" y="213" width="0.0205%" height="15" fill="rgb(222,201,40)" fg:x="3112" fg:w="1"/><text x="64.0859%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.02%)</title><rect x="65.6410%" y="229" width="0.0205%" height="15" fill="rgb(235,61,29)" fg:x="3200" fg:w="1"/><text x="65.8910%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="65.6615%" y="229" width="0.0205%" height="15" fill="rgb(219,207,3)" fg:x="3201" fg:w="1"/><text x="65.9115%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="65.7026%" y="181" width="0.0205%" height="15" fill="rgb(222,56,46)" fg:x="3203" fg:w="1"/><text x="65.9526%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.02%)</title><rect x="65.7026%" y="165" width="0.0205%" height="15" fill="rgb(239,76,54)" fg:x="3203" fg:w="1"/><text x="65.9526%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="65.7231%" y="181" width="0.0205%" height="15" fill="rgb(231,124,27)" fg:x="3204" fg:w="1"/><text x="65.9731%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="65.7231%" y="165" width="0.0205%" height="15" fill="rgb(249,195,6)" fg:x="3204" fg:w="1"/><text x="65.9731%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="65.7231%" y="149" width="0.0205%" height="15" fill="rgb(237,174,47)" fg:x="3204" fg:w="1"/><text x="65.9731%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="65.7231%" y="133" width="0.0205%" height="15" fill="rgb(206,201,31)" fg:x="3204" fg:w="1"/><text x="65.9731%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.08%)</title><rect x="65.6821%" y="197" width="0.0821%" height="15" fill="rgb(231,57,52)" fg:x="3202" fg:w="4"/><text x="65.9321%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="65.7436%" y="181" width="0.0205%" height="15" fill="rgb(248,177,22)" fg:x="3205" fg:w="1"/><text x="65.9936%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="65.7436%" y="165" width="0.0205%" height="15" fill="rgb(215,211,37)" fg:x="3205" fg:w="1"/><text x="65.9936%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.25%)</title><rect x="65.6821%" y="213" width="0.2462%" height="15" fill="rgb(241,128,51)" fg:x="3202" fg:w="12"/><text x="65.9321%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.16%)</title><rect x="65.7641%" y="197" width="0.1641%" height="15" fill="rgb(227,165,31)" fg:x="3206" fg:w="8"/><text x="66.0141%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="65.9282%" y="213" width="0.0205%" height="15" fill="rgb(228,167,24)" fg:x="3214" fg:w="1"/><text x="66.1782%" y="223.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.35%)</title><rect x="65.6205%" y="261" width="0.3487%" height="15" fill="rgb(228,143,12)" fg:x="3199" fg:w="17"/><text x="65.8705%" y="271.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (16 samples, 0.33%)</title><rect x="65.6410%" y="245" width="0.3282%" height="15" fill="rgb(249,149,8)" fg:x="3200" fg:w="16"/><text x="65.8910%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (14 samples, 0.29%)</title><rect x="65.6821%" y="229" width="0.2872%" height="15" fill="rgb(243,35,44)" fg:x="3202" fg:w="14"/><text x="65.9321%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="65.9487%" y="213" width="0.0205%" height="15" fill="rgb(246,89,9)" fg:x="3215" fg:w="1"/><text x="66.1987%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="65.9487%" y="197" width="0.0205%" height="15" fill="rgb(233,213,13)" fg:x="3215" fg:w="1"/><text x="66.1987%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="67.6103%" y="213" width="0.0205%" height="15" fill="rgb(233,141,41)" fg:x="3296" fg:w="1"/><text x="67.8603%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="67.6718%" y="181" width="0.0205%" height="15" fill="rgb(239,167,4)" fg:x="3299" fg:w="1"/><text x="67.9218%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="67.6923%" y="133" width="0.0205%" height="15" fill="rgb(209,217,16)" fg:x="3300" fg:w="1"/><text x="67.9423%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.04%)</title><rect x="67.6923%" y="181" width="0.0410%" height="15" fill="rgb(219,88,35)" fg:x="3300" fg:w="2"/><text x="67.9423%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="67.6923%" y="165" width="0.0410%" height="15" fill="rgb(220,193,23)" fg:x="3300" fg:w="2"/><text x="67.9423%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="67.6923%" y="149" width="0.0410%" height="15" fill="rgb(230,90,52)" fg:x="3300" fg:w="2"/><text x="67.9423%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="67.7128%" y="133" width="0.0205%" height="15" fill="rgb(252,106,19)" fg:x="3301" fg:w="1"/><text x="67.9628%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="67.7333%" y="165" width="0.0205%" height="15" fill="rgb(206,74,20)" fg:x="3302" fg:w="1"/><text x="67.9833%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="67.7538%" y="165" width="0.0205%" height="15" fill="rgb(230,138,44)" fg:x="3303" fg:w="1"/><text x="68.0038%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="67.7538%" y="149" width="0.0205%" height="15" fill="rgb(235,182,43)" fg:x="3303" fg:w="1"/><text x="68.0038%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="67.7538%" y="133" width="0.0205%" height="15" fill="rgb(242,16,51)" fg:x="3303" fg:w="1"/><text x="68.0038%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (2 samples, 0.04%)</title><rect x="67.7744%" y="165" width="0.0410%" height="15" fill="rgb(248,9,4)" fg:x="3304" fg:w="2"/><text x="68.0244%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="67.7949%" y="149" width="0.0205%" height="15" fill="rgb(210,31,22)" fg:x="3305" fg:w="1"/><text x="68.0449%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="67.8154%" y="165" width="0.0615%" height="15" fill="rgb(239,54,39)" fg:x="3306" fg:w="3"/><text x="68.0654%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.06%)</title><rect x="67.8154%" y="149" width="0.0615%" height="15" fill="rgb(230,99,41)" fg:x="3306" fg:w="3"/><text x="68.0654%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.06%)</title><rect x="67.8154%" y="133" width="0.0615%" height="15" fill="rgb(253,106,12)" fg:x="3306" fg:w="3"/><text x="68.0654%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.04%)</title><rect x="67.8359%" y="117" width="0.0410%" height="15" fill="rgb(213,46,41)" fg:x="3307" fg:w="2"/><text x="68.0859%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.16%)</title><rect x="67.7333%" y="181" width="0.1641%" height="15" fill="rgb(215,133,35)" fg:x="3302" fg:w="8"/><text x="67.9833%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.02%)</title><rect x="67.8769%" y="165" width="0.0205%" height="15" fill="rgb(213,28,5)" fg:x="3309" fg:w="1"/><text x="68.1269%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.31%)</title><rect x="67.6718%" y="197" width="0.3077%" height="15" fill="rgb(215,77,49)" fg:x="3299" fg:w="15"/><text x="67.9218%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.08%)</title><rect x="67.8974%" y="181" width="0.0821%" height="15" fill="rgb(248,100,22)" fg:x="3310" fg:w="4"/><text x="68.1474%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="67.9795%" y="197" width="0.0205%" height="15" fill="rgb(208,67,9)" fg:x="3314" fg:w="1"/><text x="68.2295%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="68.0000%" y="197" width="0.0205%" height="15" fill="rgb(219,133,21)" fg:x="3315" fg:w="1"/><text x="68.2500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (20 samples, 0.41%)</title><rect x="67.6308%" y="213" width="0.4103%" height="15" fill="rgb(246,46,29)" fg:x="3297" fg:w="20"/><text x="67.8808%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="68.0205%" y="197" width="0.0205%" height="15" fill="rgb(246,185,52)" fg:x="3316" fg:w="1"/><text x="68.2705%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="68.0205%" y="181" width="0.0205%" height="15" fill="rgb(252,136,11)" fg:x="3316" fg:w="1"/><text x="68.2705%" y="191.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (22 samples, 0.45%)</title><rect x="67.6103%" y="245" width="0.4513%" height="15" fill="rgb(219,138,53)" fg:x="3296" fg:w="22"/><text x="67.8603%" y="255.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (22 samples, 0.45%)</title><rect x="67.6103%" y="229" width="0.4513%" height="15" fill="rgb(211,51,23)" fg:x="3296" fg:w="22"/><text x="67.8603%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="68.0410%" y="213" width="0.0205%" height="15" fill="rgb(247,221,28)" fg:x="3317" fg:w="1"/><text x="68.2910%" y="223.50"></text></g><g><title>find_closest_points`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="69.6000%" y="213" width="0.0205%" height="15" fill="rgb(251,222,45)" fg:x="3393" fg:w="1"/><text x="69.8500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="69.6615%" y="149" width="0.0410%" height="15" fill="rgb(217,162,53)" fg:x="3396" fg:w="2"/><text x="69.9115%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (5 samples, 0.10%)</title><rect x="69.6205%" y="165" width="0.1026%" height="15" fill="rgb(229,93,14)" fg:x="3394" fg:w="5"/><text x="69.8705%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="69.7026%" y="149" width="0.0205%" height="15" fill="rgb(209,67,49)" fg:x="3398" fg:w="1"/><text x="69.9526%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="69.7026%" y="133" width="0.0205%" height="15" fill="rgb(213,87,29)" fg:x="3398" fg:w="1"/><text x="69.9526%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="69.7026%" y="117" width="0.0205%" height="15" fill="rgb(205,151,52)" fg:x="3398" fg:w="1"/><text x="69.9526%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.02%)</title><rect x="69.7231%" y="165" width="0.0205%" height="15" fill="rgb(253,215,39)" fg:x="3399" fg:w="1"/><text x="69.9731%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="69.7436%" y="149" width="0.0205%" height="15" fill="rgb(221,220,41)" fg:x="3400" fg:w="1"/><text x="69.9936%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (2 samples, 0.04%)</title><rect x="69.7641%" y="149" width="0.0410%" height="15" fill="rgb(218,133,21)" fg:x="3401" fg:w="2"/><text x="70.0141%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="69.7846%" y="133" width="0.0205%" height="15" fill="rgb(221,193,43)" fg:x="3402" fg:w="1"/><text x="70.0346%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.04%)</title><rect x="69.8051%" y="133" width="0.0410%" height="15" fill="rgb(240,128,52)" fg:x="3403" fg:w="2"/><text x="70.0551%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="69.8256%" y="117" width="0.0205%" height="15" fill="rgb(253,114,12)" fg:x="3404" fg:w="1"/><text x="70.0756%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="69.8051%" y="149" width="0.0615%" height="15" fill="rgb(215,223,47)" fg:x="3403" fg:w="3"/><text x="70.0551%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="69.8462%" y="133" width="0.0205%" height="15" fill="rgb(248,225,23)" fg:x="3405" fg:w="1"/><text x="70.0962%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="69.8462%" y="117" width="0.0205%" height="15" fill="rgb(250,108,0)" fg:x="3405" fg:w="1"/><text x="70.0962%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.14%)</title><rect x="69.7436%" y="165" width="0.1436%" height="15" fill="rgb(228,208,7)" fg:x="3400" fg:w="7"/><text x="69.9936%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="69.8667%" y="149" width="0.0205%" height="15" fill="rgb(244,45,10)" fg:x="3406" fg:w="1"/><text x="70.1167%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="69.8667%" y="133" width="0.0205%" height="15" fill="rgb(207,125,25)" fg:x="3406" fg:w="1"/><text x="70.1167%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.31%)</title><rect x="69.6205%" y="181" width="0.3077%" height="15" fill="rgb(210,195,18)" fg:x="3394" fg:w="15"/><text x="69.8705%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="69.8872%" y="165" width="0.0410%" height="15" fill="rgb(249,80,12)" fg:x="3407" fg:w="2"/><text x="70.1372%" y="175.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (22 samples, 0.45%)</title><rect x="69.5795%" y="229" width="0.4513%" height="15" fill="rgb(221,65,9)" fg:x="3392" fg:w="22"/><text x="69.8295%" y="239.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (20 samples, 0.41%)</title><rect x="69.6205%" y="213" width="0.4103%" height="15" fill="rgb(235,49,36)" fg:x="3394" fg:w="20"/><text x="69.8705%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (20 samples, 0.41%)</title><rect x="69.6205%" y="197" width="0.4103%" height="15" fill="rgb(225,32,20)" fg:x="3394" fg:w="20"/><text x="69.8705%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.10%)</title><rect x="69.9282%" y="181" width="0.1026%" height="15" fill="rgb(215,141,46)" fg:x="3409" fg:w="5"/><text x="70.1782%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.10%)</title><rect x="69.9282%" y="165" width="0.1026%" height="15" fill="rgb(250,160,47)" fg:x="3409" fg:w="5"/><text x="70.1782%" y="175.50"></text></g><g><title>find_closest_points`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="72.0615%" y="213" width="0.0205%" height="15" fill="rgb(216,222,40)" fg:x="3513" fg:w="1"/><text x="72.3115%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.04%)</title><rect x="72.1846%" y="165" width="0.0410%" height="15" fill="rgb(234,217,39)" fg:x="3519" fg:w="2"/><text x="72.4346%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="72.2462%" y="149" width="0.0205%" height="15" fill="rgb(207,178,40)" fg:x="3522" fg:w="1"/><text x="72.4962%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="72.2667%" y="149" width="0.0205%" height="15" fill="rgb(221,136,13)" fg:x="3523" fg:w="1"/><text x="72.5167%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="72.2872%" y="149" width="0.0205%" height="15" fill="rgb(249,199,10)" fg:x="3524" fg:w="1"/><text x="72.5372%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="72.3077%" y="133" width="0.0205%" height="15" fill="rgb(249,222,13)" fg:x="3525" fg:w="1"/><text x="72.5577%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.06%)</title><rect x="72.3077%" y="149" width="0.0615%" height="15" fill="rgb(244,185,38)" fg:x="3525" fg:w="3"/><text x="72.5577%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="72.3282%" y="133" width="0.0410%" height="15" fill="rgb(236,202,9)" fg:x="3526" fg:w="2"/><text x="72.5782%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="72.3282%" y="117" width="0.0410%" height="15" fill="rgb(250,229,37)" fg:x="3526" fg:w="2"/><text x="72.5782%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (2 samples, 0.04%)</title><rect x="72.3692%" y="149" width="0.0410%" height="15" fill="rgb(206,174,23)" fg:x="3528" fg:w="2"/><text x="72.6192%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="72.4308%" y="133" width="0.0205%" height="15" fill="rgb(211,33,43)" fg:x="3531" fg:w="1"/><text x="72.6808%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="72.5538%" y="101" width="0.0205%" height="15" fill="rgb(245,58,50)" fg:x="3537" fg:w="1"/><text x="72.8038%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.16%)</title><rect x="72.4513%" y="133" width="0.1641%" height="15" fill="rgb(244,68,36)" fg:x="3532" fg:w="8"/><text x="72.7013%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.12%)</title><rect x="72.4923%" y="117" width="0.1231%" height="15" fill="rgb(232,229,15)" fg:x="3534" fg:w="6"/><text x="72.7423%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.04%)</title><rect x="72.5744%" y="101" width="0.0410%" height="15" fill="rgb(254,30,23)" fg:x="3538" fg:w="2"/><text x="72.8244%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="72.6154%" y="133" width="0.0205%" height="15" fill="rgb(235,160,14)" fg:x="3540" fg:w="1"/><text x="72.8654%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (3 samples, 0.06%)</title><rect x="72.6359%" y="133" width="0.0615%" height="15" fill="rgb(212,155,44)" fg:x="3541" fg:w="3"/><text x="72.8859%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.04%)</title><rect x="72.6974%" y="117" width="0.0410%" height="15" fill="rgb(226,2,50)" fg:x="3544" fg:w="2"/><text x="72.9474%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.04%)</title><rect x="72.6974%" y="101" width="0.0410%" height="15" fill="rgb(234,177,6)" fg:x="3544" fg:w="2"/><text x="72.9474%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="72.7179%" y="85" width="0.0205%" height="15" fill="rgb(217,24,9)" fg:x="3545" fg:w="1"/><text x="72.9679%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="72.6974%" y="133" width="0.0615%" height="15" fill="rgb(220,13,46)" fg:x="3544" fg:w="3"/><text x="72.9474%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="72.7385%" y="117" width="0.0205%" height="15" fill="rgb(239,221,27)" fg:x="3546" fg:w="1"/><text x="72.9885%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="72.7385%" y="101" width="0.0205%" height="15" fill="rgb(222,198,25)" fg:x="3546" fg:w="1"/><text x="72.9885%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (18 samples, 0.37%)</title><rect x="72.4103%" y="149" width="0.3692%" height="15" fill="rgb(211,99,13)" fg:x="3530" fg:w="18"/><text x="72.6603%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.02%)</title><rect x="72.7590%" y="133" width="0.0205%" height="15" fill="rgb(232,111,31)" fg:x="3547" fg:w="1"/><text x="73.0090%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (32 samples, 0.66%)</title><rect x="72.2256%" y="165" width="0.6564%" height="15" fill="rgb(245,82,37)" fg:x="3521" fg:w="32"/><text x="72.4756%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.10%)</title><rect x="72.7795%" y="149" width="0.1026%" height="15" fill="rgb(227,149,46)" fg:x="3548" fg:w="5"/><text x="73.0295%" y="159.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (47 samples, 0.96%)</title><rect x="72.0821%" y="213" width="0.9641%" height="15" fill="rgb(218,36,50)" fg:x="3514" fg:w="47"/><text x="72.3321%" y="223.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (43 samples, 0.88%)</title><rect x="72.1641%" y="197" width="0.8821%" height="15" fill="rgb(226,80,48)" fg:x="3518" fg:w="43"/><text x="72.4141%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (43 samples, 0.88%)</title><rect x="72.1641%" y="181" width="0.8821%" height="15" fill="rgb(238,224,15)" fg:x="3518" fg:w="43"/><text x="72.4141%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.16%)</title><rect x="72.8821%" y="165" width="0.1641%" height="15" fill="rgb(241,136,10)" fg:x="3553" fg:w="8"/><text x="73.1321%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.14%)</title><rect x="72.9026%" y="149" width="0.1436%" height="15" fill="rgb(208,32,45)" fg:x="3554" fg:w="7"/><text x="73.1526%" y="159.50"></text></g><g><title>find_closest_points`__rdl_realloc (1 samples, 0.02%)</title><rect x="75.0974%" y="181" width="0.0205%" height="15" fill="rgb(207,135,9)" fg:x="3661" fg:w="1"/><text x="75.3474%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.08%)</title><rect x="75.1179%" y="165" width="0.0821%" height="15" fill="rgb(206,86,44)" fg:x="3662" fg:w="4"/><text x="75.3679%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="75.3641%" y="133" width="0.0205%" height="15" fill="rgb(245,177,15)" fg:x="3674" fg:w="1"/><text x="75.6141%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="75.3846%" y="133" width="0.0205%" height="15" fill="rgb(206,64,50)" fg:x="3675" fg:w="1"/><text x="75.6346%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="75.4051%" y="133" width="0.0205%" height="15" fill="rgb(234,36,40)" fg:x="3676" fg:w="1"/><text x="75.6551%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="75.4256%" y="117" width="0.0205%" height="15" fill="rgb(213,64,8)" fg:x="3677" fg:w="1"/><text x="75.6756%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="75.4462%" y="117" width="0.0410%" height="15" fill="rgb(210,75,36)" fg:x="3678" fg:w="2"/><text x="75.6962%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.04%)</title><rect x="75.5897%" y="85" width="0.0410%" height="15" fill="rgb(229,88,21)" fg:x="3685" fg:w="2"/><text x="75.8397%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (12 samples, 0.25%)</title><rect x="75.4256%" y="133" width="0.2462%" height="15" fill="rgb(252,204,47)" fg:x="3677" fg:w="12"/><text x="75.6756%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.18%)</title><rect x="75.4872%" y="117" width="0.1846%" height="15" fill="rgb(208,77,27)" fg:x="3680" fg:w="9"/><text x="75.7372%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.16%)</title><rect x="75.5077%" y="101" width="0.1641%" height="15" fill="rgb(221,76,26)" fg:x="3681" fg:w="8"/><text x="75.7577%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="75.6308%" y="85" width="0.0410%" height="15" fill="rgb(225,139,18)" fg:x="3687" fg:w="2"/><text x="75.8808%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.02%)</title><rect x="75.6923%" y="117" width="0.0205%" height="15" fill="rgb(230,137,11)" fg:x="3690" fg:w="1"/><text x="75.9423%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.18%)</title><rect x="75.7128%" y="117" width="0.1846%" height="15" fill="rgb(212,28,1)" fg:x="3691" fg:w="9"/><text x="75.9628%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.06%)</title><rect x="75.8359%" y="101" width="0.0615%" height="15" fill="rgb(248,164,17)" fg:x="3697" fg:w="3"/><text x="76.0859%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="75.8769%" y="85" width="0.0205%" height="15" fill="rgb(222,171,42)" fg:x="3699" fg:w="1"/><text x="76.1269%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.06%)</title><rect x="75.8974%" y="101" width="0.0615%" height="15" fill="rgb(243,84,45)" fg:x="3700" fg:w="3"/><text x="76.1474%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="75.9385%" y="85" width="0.0205%" height="15" fill="rgb(252,49,23)" fg:x="3702" fg:w="1"/><text x="76.1885%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.10%)</title><rect x="75.8974%" y="117" width="0.1026%" height="15" fill="rgb(215,19,7)" fg:x="3700" fg:w="5"/><text x="76.1474%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="75.9590%" y="101" width="0.0410%" height="15" fill="rgb(238,81,41)" fg:x="3703" fg:w="2"/><text x="76.2090%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="75.9590%" y="85" width="0.0410%" height="15" fill="rgb(210,199,37)" fg:x="3703" fg:w="2"/><text x="76.2090%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="75.9795%" y="69" width="0.0205%" height="15" fill="rgb(244,192,49)" fg:x="3704" fg:w="1"/><text x="76.2295%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="76.0000%" y="117" width="0.0205%" height="15" fill="rgb(226,211,11)" fg:x="3705" fg:w="1"/><text x="76.2500%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="76.0000%" y="101" width="0.0205%" height="15" fill="rgb(236,162,54)" fg:x="3705" fg:w="1"/><text x="76.2500%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (19 samples, 0.39%)</title><rect x="75.6718%" y="133" width="0.3897%" height="15" fill="rgb(220,229,9)" fg:x="3689" fg:w="19"/><text x="75.9218%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.04%)</title><rect x="76.0205%" y="117" width="0.0410%" height="15" fill="rgb(250,87,22)" fg:x="3706" fg:w="2"/><text x="76.2705%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="76.0615%" y="133" width="0.0205%" height="15" fill="rgb(239,43,17)" fg:x="3708" fg:w="1"/><text x="76.3115%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.02%)</title><rect x="76.0821%" y="133" width="0.0205%" height="15" fill="rgb(231,177,25)" fg:x="3709" fg:w="1"/><text x="76.3321%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (44 samples, 0.90%)</title><rect x="75.3026%" y="149" width="0.9026%" height="15" fill="rgb(219,179,1)" fg:x="3671" fg:w="44"/><text x="75.5526%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.10%)</title><rect x="76.1026%" y="133" width="0.1026%" height="15" fill="rgb(238,219,53)" fg:x="3710" fg:w="5"/><text x="76.3526%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="76.2051%" y="149" width="0.0205%" height="15" fill="rgb(232,167,36)" fg:x="3715" fg:w="1"/><text x="76.4551%" y="159.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (59 samples, 1.21%)</title><rect x="75.1179%" y="181" width="1.2103%" height="15" fill="rgb(244,19,51)" fg:x="3662" fg:w="59"/><text x="75.3679%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (55 samples, 1.13%)</title><rect x="75.2000%" y="165" width="1.1282%" height="15" fill="rgb(224,6,22)" fg:x="3666" fg:w="55"/><text x="75.4500%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.10%)</title><rect x="76.2256%" y="149" width="0.1026%" height="15" fill="rgb(224,145,5)" fg:x="3716" fg:w="5"/><text x="76.4756%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.10%)</title><rect x="76.2256%" y="133" width="0.1026%" height="15" fill="rgb(234,130,49)" fg:x="3716" fg:w="5"/><text x="76.4756%" y="143.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (64 samples, 1.31%)</title><rect x="75.0359%" y="197" width="1.3128%" height="15" fill="rgb(254,6,2)" fg:x="3658" fg:w="64"/><text x="75.2859%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="76.3282%" y="181" width="0.0205%" height="15" fill="rgb(208,96,46)" fg:x="3721" fg:w="1"/><text x="76.5782%" y="191.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="76.3487%" y="197" width="0.0410%" height="15" fill="rgb(239,3,39)" fg:x="3722" fg:w="2"/><text x="76.5987%" y="207.50"></text></g><g><title>find_closest_points`DYLD-STUB$$free (2 samples, 0.04%)</title><rect x="78.0718%" y="181" width="0.0410%" height="15" fill="rgb(233,210,1)" fg:x="3806" fg:w="2"/><text x="78.3218%" y="191.50"></text></g><g><title>find_closest_points`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="78.1128%" y="165" width="0.0205%" height="15" fill="rgb(244,137,37)" fg:x="3808" fg:w="1"/><text x="78.3628%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.06%)</title><rect x="78.2359%" y="149" width="0.0615%" height="15" fill="rgb(240,136,2)" fg:x="3814" fg:w="3"/><text x="78.4859%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="78.2974%" y="149" width="0.0205%" height="15" fill="rgb(239,18,37)" fg:x="3817" fg:w="1"/><text x="78.5474%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="78.3179%" y="133" width="0.0205%" height="15" fill="rgb(218,185,22)" fg:x="3818" fg:w="1"/><text x="78.5679%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="78.4410%" y="117" width="0.0205%" height="15" fill="rgb(225,218,4)" fg:x="3824" fg:w="1"/><text x="78.6910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="78.4615%" y="117" width="0.0205%" height="15" fill="rgb(230,182,32)" fg:x="3825" fg:w="1"/><text x="78.7115%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="78.4821%" y="117" width="0.0205%" height="15" fill="rgb(242,56,43)" fg:x="3826" fg:w="1"/><text x="78.7321%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.08%)</title><rect x="78.5026%" y="117" width="0.0821%" height="15" fill="rgb(233,99,24)" fg:x="3827" fg:w="4"/><text x="78.7526%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.25%)</title><rect x="78.6256%" y="101" width="0.2462%" height="15" fill="rgb(234,209,42)" fg:x="3833" fg:w="12"/><text x="78.8756%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.06%)</title><rect x="78.9333%" y="69" width="0.0615%" height="15" fill="rgb(227,7,12)" fg:x="3848" fg:w="3"/><text x="79.1833%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.27%)</title><rect x="78.8718%" y="101" width="0.2667%" height="15" fill="rgb(245,203,43)" fg:x="3845" fg:w="13"/><text x="79.1218%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.25%)</title><rect x="78.8923%" y="85" width="0.2462%" height="15" fill="rgb(238,205,33)" fg:x="3846" fg:w="12"/><text x="79.1423%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.14%)</title><rect x="78.9949%" y="69" width="0.1436%" height="15" fill="rgb(231,56,7)" fg:x="3851" fg:w="7"/><text x="79.2449%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.04%)</title><rect x="79.0974%" y="53" width="0.0410%" height="15" fill="rgb(244,186,29)" fg:x="3856" fg:w="2"/><text x="79.3474%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (28 samples, 0.57%)</title><rect x="78.5846%" y="117" width="0.5744%" height="15" fill="rgb(234,111,31)" fg:x="3831" fg:w="28"/><text x="78.8346%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="79.1385%" y="101" width="0.0205%" height="15" fill="rgb(241,149,10)" fg:x="3858" fg:w="1"/><text x="79.3885%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="79.1590%" y="101" width="0.0205%" height="15" fill="rgb(249,206,44)" fg:x="3859" fg:w="1"/><text x="79.4090%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="79.2000%" y="85" width="0.0205%" height="15" fill="rgb(251,153,30)" fg:x="3861" fg:w="1"/><text x="79.4500%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.06%)</title><rect x="79.1795%" y="101" width="0.0615%" height="15" fill="rgb(239,152,38)" fg:x="3860" fg:w="3"/><text x="79.4295%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="79.2205%" y="85" width="0.0205%" height="15" fill="rgb(249,139,47)" fg:x="3862" fg:w="1"/><text x="79.4705%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="79.2410%" y="101" width="0.0205%" height="15" fill="rgb(244,64,35)" fg:x="3863" fg:w="1"/><text x="79.4910%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="79.2615%" y="85" width="0.0205%" height="15" fill="rgb(216,46,15)" fg:x="3864" fg:w="1"/><text x="79.5115%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.14%)</title><rect x="79.2615%" y="101" width="0.1436%" height="15" fill="rgb(250,74,19)" fg:x="3864" fg:w="7"/><text x="79.5115%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="79.2821%" y="85" width="0.1231%" height="15" fill="rgb(249,42,33)" fg:x="3865" fg:w="6"/><text x="79.5321%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.08%)</title><rect x="79.3231%" y="69" width="0.0821%" height="15" fill="rgb(242,149,17)" fg:x="3867" fg:w="4"/><text x="79.5731%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="79.4051%" y="101" width="0.0205%" height="15" fill="rgb(244,29,21)" fg:x="3871" fg:w="1"/><text x="79.6551%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="79.4051%" y="85" width="0.0205%" height="15" fill="rgb(220,130,37)" fg:x="3871" fg:w="1"/><text x="79.6551%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="79.4256%" y="101" width="0.0205%" height="15" fill="rgb(211,67,2)" fg:x="3872" fg:w="1"/><text x="79.6756%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="79.4462%" y="101" width="0.0205%" height="15" fill="rgb(235,68,52)" fg:x="3873" fg:w="1"/><text x="79.6962%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.04%)</title><rect x="79.4667%" y="101" width="0.0410%" height="15" fill="rgb(246,142,3)" fg:x="3874" fg:w="2"/><text x="79.7167%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (19 samples, 0.39%)</title><rect x="79.1590%" y="117" width="0.3897%" height="15" fill="rgb(241,25,7)" fg:x="3859" fg:w="19"/><text x="79.4090%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="79.5077%" y="101" width="0.0410%" height="15" fill="rgb(242,119,39)" fg:x="3876" fg:w="2"/><text x="79.7577%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (62 samples, 1.27%)</title><rect x="78.3385%" y="133" width="1.2718%" height="15" fill="rgb(241,98,45)" fg:x="3819" fg:w="62"/><text x="78.5885%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.06%)</title><rect x="79.5487%" y="117" width="0.0615%" height="15" fill="rgb(254,28,30)" fg:x="3878" fg:w="3"/><text x="79.7987%" y="127.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (73 samples, 1.50%)</title><rect x="78.1333%" y="165" width="1.4974%" height="15" fill="rgb(241,142,54)" fg:x="3809" fg:w="73"/><text x="78.3833%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (64 samples, 1.31%)</title><rect x="78.3179%" y="149" width="1.3128%" height="15" fill="rgb(222,85,15)" fg:x="3818" fg:w="64"/><text x="78.5679%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="79.6103%" y="133" width="0.0205%" height="15" fill="rgb(210,85,47)" fg:x="3881" fg:w="1"/><text x="79.8603%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="79.6308%" y="165" width="0.0410%" height="15" fill="rgb(224,206,25)" fg:x="3882" fg:w="2"/><text x="79.8808%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="79.6718%" y="165" width="0.0410%" height="15" fill="rgb(243,201,19)" fg:x="3884" fg:w="2"/><text x="79.9218%" y="175.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (79 samples, 1.62%)</title><rect x="78.1128%" y="181" width="1.6205%" height="15" fill="rgb(236,59,4)" fg:x="3808" fg:w="79"/><text x="78.3628%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="79.7128%" y="165" width="0.0205%" height="15" fill="rgb(254,179,45)" fg:x="3886" fg:w="1"/><text x="79.9628%" y="175.50"></text></g><g><title>find_closest_points`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="81.7436%" y="165" width="0.0205%" height="15" fill="rgb(226,14,10)" fg:x="3985" fg:w="1"/><text x="81.9936%" y="175.50"></text></g><g><title>find_closest_points`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="81.7641%" y="165" width="0.0205%" height="15" fill="rgb(244,27,41)" fg:x="3986" fg:w="1"/><text x="82.0141%" y="175.50"></text></g><g><title>find_closest_points`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="82.0308%" y="149" width="0.0205%" height="15" fill="rgb(235,35,32)" fg:x="3999" fg:w="1"/><text x="82.2808%" y="159.50"></text></g><g><title>find_closest_points`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="82.0513%" y="149" width="0.0205%" height="15" fill="rgb(218,68,31)" fg:x="4000" fg:w="1"/><text x="82.3013%" y="159.50"></text></g><g><title>find_closest_points`__rdl_alloc (1 samples, 0.02%)</title><rect x="82.0718%" y="149" width="0.0205%" height="15" fill="rgb(207,120,37)" fg:x="4001" fg:w="1"/><text x="82.3218%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.04%)</title><rect x="82.1333%" y="133" width="0.0410%" height="15" fill="rgb(227,98,0)" fg:x="4004" fg:w="2"/><text x="82.3833%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.10%)</title><rect x="82.1744%" y="133" width="0.1026%" height="15" fill="rgb(207,7,3)" fg:x="4006" fg:w="5"/><text x="82.4244%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="82.4000%" y="117" width="0.0205%" height="15" fill="rgb(206,98,19)" fg:x="4017" fg:w="1"/><text x="82.6500%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="82.4410%" y="101" width="0.0205%" height="15" fill="rgb(217,5,26)" fg:x="4019" fg:w="1"/><text x="82.6910%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.12%)</title><rect x="82.4615%" y="101" width="0.1231%" height="15" fill="rgb(235,190,38)" fg:x="4020" fg:w="6"/><text x="82.7115%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.06%)</title><rect x="82.5846%" y="101" width="0.0615%" height="15" fill="rgb(247,86,24)" fg:x="4026" fg:w="3"/><text x="82.8346%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.18%)</title><rect x="82.6872%" y="85" width="0.1846%" height="15" fill="rgb(205,101,16)" fg:x="4031" fg:w="9"/><text x="82.9372%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.08%)</title><rect x="82.8718%" y="53" width="0.0821%" height="15" fill="rgb(246,168,33)" fg:x="4040" fg:w="4"/><text x="83.1218%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="83.1179%" y="37" width="0.0205%" height="15" fill="rgb(231,114,1)" fg:x="4052" fg:w="1"/><text x="83.3679%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (28 samples, 0.57%)</title><rect x="82.6462%" y="101" width="0.5744%" height="15" fill="rgb(207,184,53)" fg:x="4029" fg:w="28"/><text x="82.8962%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.35%)</title><rect x="82.8718%" y="85" width="0.3487%" height="15" fill="rgb(224,95,51)" fg:x="4040" fg:w="17"/><text x="83.1218%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.35%)</title><rect x="82.8718%" y="69" width="0.3487%" height="15" fill="rgb(212,188,45)" fg:x="4040" fg:w="17"/><text x="83.1218%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (13 samples, 0.27%)</title><rect x="82.9538%" y="53" width="0.2667%" height="15" fill="rgb(223,154,38)" fg:x="4044" fg:w="13"/><text x="83.2038%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.08%)</title><rect x="83.1385%" y="37" width="0.0821%" height="15" fill="rgb(251,22,52)" fg:x="4053" fg:w="4"/><text x="83.3885%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (40 samples, 0.82%)</title><rect x="82.4205%" y="117" width="0.8205%" height="15" fill="rgb(229,209,22)" fg:x="4018" fg:w="40"/><text x="82.6705%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="83.2205%" y="101" width="0.0205%" height="15" fill="rgb(234,138,34)" fg:x="4057" fg:w="1"/><text x="83.4705%" y="111.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (58 samples, 1.19%)</title><rect x="82.0923%" y="149" width="1.1897%" height="15" fill="rgb(212,95,11)" fg:x="4002" fg:w="58"/><text x="82.3423%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (49 samples, 1.01%)</title><rect x="82.2769%" y="133" width="1.0051%" height="15" fill="rgb(240,179,47)" fg:x="4011" fg:w="49"/><text x="82.5269%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.04%)</title><rect x="83.2410%" y="117" width="0.0410%" height="15" fill="rgb(240,163,11)" fg:x="4058" fg:w="2"/><text x="83.4910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="83.2821%" y="149" width="0.0410%" height="15" fill="rgb(236,37,12)" fg:x="4060" fg:w="2"/><text x="83.5321%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="83.3231%" y="149" width="0.0410%" height="15" fill="rgb(232,164,16)" fg:x="4062" fg:w="2"/><text x="83.5731%" y="159.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (79 samples, 1.62%)</title><rect x="81.7846%" y="165" width="1.6205%" height="15" fill="rgb(244,205,15)" fg:x="3987" fg:w="79"/><text x="82.0346%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.04%)</title><rect x="83.3641%" y="149" width="0.0410%" height="15" fill="rgb(223,117,47)" fg:x="4064" fg:w="2"/><text x="83.6141%" y="159.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="83.4051%" y="165" width="0.0205%" height="15" fill="rgb(244,107,35)" fg:x="4066" fg:w="1"/><text x="83.6551%" y="175.50"></text></g><g><title>find_closest_points`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="85.3538%" y="149" width="0.0205%" height="15" fill="rgb(205,140,8)" fg:x="4161" fg:w="1"/><text x="85.6038%" y="159.50"></text></g><g><title>find_closest_points`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="85.3744%" y="149" width="0.0205%" height="15" fill="rgb(228,84,46)" fg:x="4162" fg:w="1"/><text x="85.6244%" y="159.50"></text></g><g><title>find_closest_points`__rust_dealloc (1 samples, 0.02%)</title><rect x="85.3949%" y="149" width="0.0205%" height="15" fill="rgb(254,188,9)" fg:x="4163" fg:w="1"/><text x="85.6449%" y="159.50"></text></g><g><title>find_closest_points`DYLD-STUB$$malloc (2 samples, 0.04%)</title><rect x="85.4769%" y="133" width="0.0410%" height="15" fill="rgb(206,112,54)" fg:x="4167" fg:w="2"/><text x="85.7269%" y="143.50"></text></g><g><title>find_closest_points`__rdl_alloc (1 samples, 0.02%)</title><rect x="85.5179%" y="133" width="0.0205%" height="15" fill="rgb(216,84,49)" fg:x="4169" fg:w="1"/><text x="85.7679%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="85.6000%" y="85" width="0.0205%" height="15" fill="rgb(214,194,35)" fg:x="4173" fg:w="1"/><text x="85.8500%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.06%)</title><rect x="85.6205%" y="85" width="0.0615%" height="15" fill="rgb(249,28,3)" fg:x="4174" fg:w="3"/><text x="85.8705%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.04%)</title><rect x="85.6821%" y="85" width="0.0410%" height="15" fill="rgb(222,56,52)" fg:x="4177" fg:w="2"/><text x="85.9321%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.21%)</title><rect x="85.5795%" y="101" width="0.2051%" height="15" fill="rgb(245,217,50)" fg:x="4172" fg:w="10"/><text x="85.8295%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.06%)</title><rect x="85.7231%" y="85" width="0.0615%" height="15" fill="rgb(213,201,24)" fg:x="4179" fg:w="3"/><text x="85.9731%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="85.7641%" y="69" width="0.0205%" height="15" fill="rgb(248,116,28)" fg:x="4181" fg:w="1"/><text x="86.0141%" y="79.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (14 samples, 0.29%)</title><rect x="85.5385%" y="133" width="0.2872%" height="15" fill="rgb(219,72,43)" fg:x="4170" fg:w="14"/><text x="85.7885%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.25%)</title><rect x="85.5795%" y="117" width="0.2462%" height="15" fill="rgb(209,138,14)" fg:x="4172" fg:w="12"/><text x="85.8295%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.04%)</title><rect x="85.7846%" y="101" width="0.0410%" height="15" fill="rgb(222,18,33)" fg:x="4182" fg:w="2"/><text x="86.0346%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.12%)</title><rect x="85.8256%" y="133" width="0.1231%" height="15" fill="rgb(213,199,7)" fg:x="4184" fg:w="6"/><text x="86.0756%" y="143.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.64%)</title><rect x="85.4154%" y="149" width="0.6359%" height="15" fill="rgb(250,110,10)" fg:x="4164" fg:w="31"/><text x="85.6654%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.10%)</title><rect x="85.9487%" y="133" width="0.1026%" height="15" fill="rgb(248,123,6)" fg:x="4190" fg:w="5"/><text x="86.1987%" y="143.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="86.0513%" y="149" width="0.0205%" height="15" fill="rgb(206,91,31)" fg:x="4195" fg:w="1"/><text x="86.3013%" y="159.50"></text></g><g><title>find_closest_points`__rdl_alloc (1 samples, 0.02%)</title><rect x="87.9385%" y="133" width="0.0205%" height="15" fill="rgb(211,154,13)" fg:x="4287" fg:w="1"/><text x="88.1885%" y="143.50"></text></g><g><title>find_closest_points`__rdl_dealloc (1 samples, 0.02%)</title><rect x="87.9590%" y="133" width="0.0205%" height="15" fill="rgb(225,148,7)" fg:x="4288" fg:w="1"/><text x="88.2090%" y="143.50"></text></g><g><title>find_closest_points`DYLD-STUB$$malloc (3 samples, 0.06%)</title><rect x="88.1641%" y="117" width="0.0615%" height="15" fill="rgb(220,160,43)" fg:x="4298" fg:w="3"/><text x="88.4141%" y="127.50"></text></g><g><title>find_closest_points`__rdl_alloc (2 samples, 0.04%)</title><rect x="88.2256%" y="117" width="0.0410%" height="15" fill="rgb(213,52,39)" fg:x="4301" fg:w="2"/><text x="88.4756%" y="127.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (3 samples, 0.06%)</title><rect x="88.2667%" y="117" width="0.0615%" height="15" fill="rgb(243,137,7)" fg:x="4303" fg:w="3"/><text x="88.5167%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.21%)</title><rect x="88.3282%" y="117" width="0.2051%" height="15" fill="rgb(230,79,13)" fg:x="4306" fg:w="10"/><text x="88.5782%" y="127.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (40 samples, 0.82%)</title><rect x="87.9795%" y="133" width="0.8205%" height="15" fill="rgb(247,105,23)" fg:x="4289" fg:w="40"/><text x="88.2295%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.27%)</title><rect x="88.5333%" y="117" width="0.2667%" height="15" fill="rgb(223,179,41)" fg:x="4316" fg:w="13"/><text x="88.7833%" y="127.50"></text></g><g><title>find_closest_points`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="88.8000%" y="133" width="0.0205%" height="15" fill="rgb(218,9,34)" fg:x="4329" fg:w="1"/><text x="89.0500%" y="143.50"></text></g><g><title>find_closest_points`__rdl_alloc (1 samples, 0.02%)</title><rect x="89.4564%" y="117" width="0.0205%" height="15" fill="rgb(222,106,8)" fg:x="4361" fg:w="1"/><text x="89.7064%" y="127.50"></text></g><g><title>find_closest_points`__rdl_alloc (1 samples, 0.02%)</title><rect x="89.5179%" y="101" width="0.0205%" height="15" fill="rgb(211,220,0)" fg:x="4364" fg:w="1"/><text x="89.7679%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.14%)</title><rect x="89.5385%" y="101" width="0.1436%" height="15" fill="rgb(229,52,16)" fg:x="4365" fg:w="7"/><text x="89.7885%" y="111.50"></text></g><g><title>find_closest_points`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.35%)</title><rect x="89.4769%" y="117" width="0.3487%" height="15" fill="rgb(212,155,18)" fg:x="4362" fg:w="17"/><text x="89.7269%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.14%)</title><rect x="89.6821%" y="101" width="0.1436%" height="15" fill="rgb(242,21,14)" fg:x="4372" fg:w="7"/><text x="89.9321%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="89.9692%" y="101" width="0.0205%" height="15" fill="rgb(222,19,48)" fg:x="4386" fg:w="1"/><text x="90.2192%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.23%)</title><rect x="89.9897%" y="101" width="0.2256%" height="15" fill="rgb(232,45,27)" fg:x="4387" fg:w="11"/><text x="90.2397%" y="111.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (39 samples, 0.80%)</title><rect x="89.8256%" y="117" width="0.8000%" height="15" fill="rgb(249,103,42)" fg:x="4379" fg:w="39"/><text x="90.0756%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (20 samples, 0.41%)</title><rect x="90.2154%" y="101" width="0.4103%" height="15" fill="rgb(246,81,33)" fg:x="4398" fg:w="20"/><text x="90.4654%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (12 samples, 0.25%)</title><rect x="90.3795%" y="85" width="0.2462%" height="15" fill="rgb(252,33,42)" fg:x="4406" fg:w="12"/><text x="90.6295%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.06%)</title><rect x="90.6256%" y="117" width="0.0615%" height="15" fill="rgb(209,212,41)" fg:x="4418" fg:w="3"/><text x="90.8756%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.06%)</title><rect x="90.6872%" y="117" width="0.0615%" height="15" fill="rgb(207,154,6)" fg:x="4421" fg:w="3"/><text x="90.9372%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (17 samples, 0.35%)</title><rect x="90.7487%" y="117" width="0.3487%" height="15" fill="rgb(223,64,47)" fg:x="4424" fg:w="17"/><text x="90.9987%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.06%)</title><rect x="91.0974%" y="117" width="0.0615%" height="15" fill="rgb(211,161,38)" fg:x="4441" fg:w="3"/><text x="91.3474%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (37 samples, 0.76%)</title><rect x="91.1590%" y="117" width="0.7590%" height="15" fill="rgb(219,138,40)" fg:x="4444" fg:w="37"/><text x="91.4090%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (18 samples, 0.37%)</title><rect x="91.5487%" y="101" width="0.3692%" height="15" fill="rgb(241,228,46)" fg:x="4463" fg:w="18"/><text x="91.7987%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.14%)</title><rect x="91.9179%" y="117" width="0.1436%" height="15" fill="rgb(223,209,38)" fg:x="4481" fg:w="7"/><text x="92.1679%" y="127.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (159 samples, 3.26%)</title><rect x="88.8205%" y="133" width="3.2615%" height="15" fill="rgb(236,164,45)" fg:x="4330" fg:w="159"/><text x="89.0705%" y="143.50">fin..</text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="92.0615%" y="117" width="0.0205%" height="15" fill="rgb(231,15,5)" fg:x="4488" fg:w="1"/><text x="92.3115%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="92.0821%" y="133" width="0.0205%" height="15" fill="rgb(252,35,15)" fg:x="4489" fg:w="1"/><text x="92.3321%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.12%)</title><rect x="92.1026%" y="133" width="0.1231%" height="15" fill="rgb(248,181,18)" fg:x="4490" fg:w="6"/><text x="92.3526%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (16 samples, 0.33%)</title><rect x="92.2256%" y="133" width="0.3282%" height="15" fill="rgb(233,39,42)" fg:x="4496" fg:w="16"/><text x="92.4756%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.37%)</title><rect x="92.5538%" y="133" width="0.3692%" height="15" fill="rgb(238,110,33)" fg:x="4512" fg:w="18"/><text x="92.8038%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (22 samples, 0.45%)</title><rect x="92.9231%" y="133" width="0.4513%" height="15" fill="rgb(233,195,10)" fg:x="4530" fg:w="22"/><text x="93.1731%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (13 samples, 0.27%)</title><rect x="93.1077%" y="117" width="0.2667%" height="15" fill="rgb(254,105,3)" fg:x="4539" fg:w="13"/><text x="93.3577%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.14%)</title><rect x="93.3744%" y="133" width="0.1436%" height="15" fill="rgb(221,225,9)" fg:x="4552" fg:w="7"/><text x="93.6244%" y="143.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (364 samples, 7.47%)</title><rect x="86.0718%" y="149" width="7.4667%" height="15" fill="rgb(224,227,45)" fg:x="4196" fg:w="364"/><text x="86.3218%" y="159.50">find_close..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="93.5179%" y="133" width="0.0205%" height="15" fill="rgb(229,198,43)" fg:x="4559" fg:w="1"/><text x="93.7679%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.02%)</title><rect x="93.5385%" y="149" width="0.0205%" height="15" fill="rgb(206,209,35)" fg:x="4560" fg:w="1"/><text x="93.7885%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.14%)</title><rect x="93.5590%" y="149" width="0.1436%" height="15" fill="rgb(245,195,53)" fg:x="4561" fg:w="7"/><text x="93.8090%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.08%)</title><rect x="93.7026%" y="149" width="0.0821%" height="15" fill="rgb(240,92,26)" fg:x="4568" fg:w="4"/><text x="93.9526%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="93.7846%" y="149" width="0.0205%" height="15" fill="rgb(207,40,23)" fg:x="4572" fg:w="1"/><text x="94.0346%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.08%)</title><rect x="93.8051%" y="149" width="0.0821%" height="15" fill="rgb(223,111,35)" fg:x="4573" fg:w="4"/><text x="94.0551%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.06%)</title><rect x="93.8872%" y="149" width="0.0615%" height="15" fill="rgb(229,147,28)" fg:x="4577" fg:w="3"/><text x="94.1372%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="93.9282%" y="133" width="0.0205%" height="15" fill="rgb(211,29,28)" fg:x="4579" fg:w="1"/><text x="94.1782%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (16 samples, 0.33%)</title><rect x="93.9487%" y="149" width="0.3282%" height="15" fill="rgb(228,72,33)" fg:x="4580" fg:w="16"/><text x="94.1987%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.12%)</title><rect x="94.1538%" y="133" width="0.1231%" height="15" fill="rgb(205,214,31)" fg:x="4590" fg:w="6"/><text x="94.4038%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="94.2769%" y="149" width="0.0205%" height="15" fill="rgb(224,111,15)" fg:x="4596" fg:w="1"/><text x="94.5269%" y="159.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (531 samples, 10.89%)</title><rect x="83.4256%" y="165" width="10.8923%" height="15" fill="rgb(253,21,26)" fg:x="4067" fg:w="531"/><text x="83.6756%" y="175.50">find_closest_poi..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="94.2974%" y="149" width="0.0205%" height="15" fill="rgb(245,139,43)" fg:x="4597" fg:w="1"/><text x="94.5474%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.06%)</title><rect x="94.3179%" y="165" width="0.0615%" height="15" fill="rgb(252,170,7)" fg:x="4598" fg:w="3"/><text x="94.5679%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="94.3795%" y="165" width="0.0410%" height="15" fill="rgb(231,118,14)" fg:x="4601" fg:w="2"/><text x="94.6295%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.06%)</title><rect x="94.4205%" y="165" width="0.0615%" height="15" fill="rgb(238,83,0)" fg:x="4603" fg:w="3"/><text x="94.6705%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.12%)</title><rect x="94.4821%" y="165" width="0.1231%" height="15" fill="rgb(221,39,39)" fg:x="4606" fg:w="6"/><text x="94.7321%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="94.7487%" y="149" width="0.0205%" height="15" fill="rgb(222,119,46)" fg:x="4619" fg:w="1"/><text x="94.9987%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.31%)</title><rect x="94.6051%" y="165" width="0.3077%" height="15" fill="rgb(222,165,49)" fg:x="4612" fg:w="15"/><text x="94.8551%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.14%)</title><rect x="94.7692%" y="149" width="0.1436%" height="15" fill="rgb(219,113,52)" fg:x="4620" fg:w="7"/><text x="95.0192%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="94.8923%" y="133" width="0.0205%" height="15" fill="rgb(214,7,15)" fg:x="4626" fg:w="1"/><text x="95.1423%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="94.9128%" y="165" width="0.0410%" height="15" fill="rgb(235,32,4)" fg:x="4627" fg:w="2"/><text x="95.1628%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.04%)</title><rect x="94.9538%" y="165" width="0.0410%" height="15" fill="rgb(238,90,54)" fg:x="4629" fg:w="2"/><text x="95.2038%" y="175.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (750 samples, 15.38%)</title><rect x="79.7333%" y="181" width="15.3846%" height="15" fill="rgb(213,208,19)" fg:x="3887" fg:w="750"/><text x="79.9833%" y="191.50">find_closest_points`find..</text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.12%)</title><rect x="94.9949%" y="165" width="0.1231%" height="15" fill="rgb(233,156,4)" fg:x="4631" fg:w="6"/><text x="95.2449%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="95.1179%" y="181" width="0.0410%" height="15" fill="rgb(207,194,5)" fg:x="4637" fg:w="2"/><text x="95.3679%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="95.1590%" y="181" width="0.0205%" height="15" fill="rgb(206,111,30)" fg:x="4639" fg:w="1"/><text x="95.4090%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.04%)</title><rect x="95.1795%" y="181" width="0.0410%" height="15" fill="rgb(243,70,54)" fg:x="4640" fg:w="2"/><text x="95.4295%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="95.2205%" y="181" width="0.0410%" height="15" fill="rgb(242,28,8)" fg:x="4642" fg:w="2"/><text x="95.4705%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.04%)</title><rect x="95.3026%" y="165" width="0.0410%" height="15" fill="rgb(219,106,18)" fg:x="4646" fg:w="2"/><text x="95.5526%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.10%)</title><rect x="95.2615%" y="181" width="0.1026%" height="15" fill="rgb(244,222,10)" fg:x="4644" fg:w="5"/><text x="95.5115%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="95.3436%" y="165" width="0.0205%" height="15" fill="rgb(236,179,52)" fg:x="4648" fg:w="1"/><text x="95.5936%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="95.3641%" y="181" width="0.0205%" height="15" fill="rgb(213,23,39)" fg:x="4649" fg:w="1"/><text x="95.6141%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="95.3641%" y="165" width="0.0205%" height="15" fill="rgb(238,48,10)" fg:x="4649" fg:w="1"/><text x="95.6141%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.04%)</title><rect x="95.3846%" y="181" width="0.0410%" height="15" fill="rgb(251,196,23)" fg:x="4650" fg:w="2"/><text x="95.6346%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="95.4051%" y="165" width="0.0205%" height="15" fill="rgb(250,152,24)" fg:x="4651" fg:w="1"/><text x="95.6551%" y="175.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (931 samples, 19.10%)</title><rect x="76.3897%" y="197" width="19.0974%" height="15" fill="rgb(209,150,17)" fg:x="3724" fg:w="931"/><text x="76.6397%" y="207.50">find_closest_points`find_close..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.06%)</title><rect x="95.4256%" y="181" width="0.0615%" height="15" fill="rgb(234,202,34)" fg:x="4652" fg:w="3"/><text x="95.6756%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="95.4872%" y="197" width="0.0205%" height="15" fill="rgb(253,148,53)" fg:x="4655" fg:w="1"/><text x="95.7372%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="95.5077%" y="197" width="0.0205%" height="15" fill="rgb(218,129,16)" fg:x="4656" fg:w="1"/><text x="95.7577%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.08%)</title><rect x="95.5282%" y="197" width="0.0821%" height="15" fill="rgb(216,85,19)" fg:x="4657" fg:w="4"/><text x="95.7782%" y="207.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (1,101 samples, 22.58%)</title><rect x="73.0462%" y="213" width="22.5846%" height="15" fill="rgb(235,228,7)" fg:x="3561" fg:w="1101"/><text x="73.2962%" y="223.50">find_closest_points`find_closest_poi..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="95.6103%" y="197" width="0.0205%" height="15" fill="rgb(245,175,0)" fg:x="4661" fg:w="1"/><text x="95.8603%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="95.6103%" y="181" width="0.0205%" height="15" fill="rgb(208,168,36)" fg:x="4661" fg:w="1"/><text x="95.8603%" y="191.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (1,250 samples, 25.64%)</title><rect x="70.0308%" y="229" width="25.6410%" height="15" fill="rgb(246,171,24)" fg:x="3414" fg:w="1250"/><text x="70.2808%" y="239.50">find_closest_points`find_closest_points::..</text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="95.6308%" y="213" width="0.0410%" height="15" fill="rgb(215,142,24)" fg:x="4662" fg:w="2"/><text x="95.8808%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="95.6718%" y="229" width="0.0205%" height="15" fill="rgb(250,187,7)" fg:x="4664" fg:w="1"/><text x="95.9218%" y="239.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (1,348 samples, 27.65%)</title><rect x="68.0615%" y="245" width="27.6513%" height="15" fill="rgb(228,66,33)" fg:x="3318" fg:w="1348"/><text x="68.3115%" y="255.50">find_closest_points`find_closest_points::kd_..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="95.6923%" y="229" width="0.0205%" height="15" fill="rgb(234,215,21)" fg:x="4665" fg:w="1"/><text x="95.9423%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="95.7128%" y="245" width="0.0205%" height="15" fill="rgb(222,191,20)" fg:x="4666" fg:w="1"/><text x="95.9628%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="95.7333%" y="245" width="0.0205%" height="15" fill="rgb(245,79,54)" fg:x="4667" fg:w="1"/><text x="95.9833%" y="255.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (1,453 samples, 29.81%)</title><rect x="65.9692%" y="261" width="29.8051%" height="15" fill="rgb(240,10,37)" fg:x="3216" fg:w="1453"/><text x="66.2192%" y="271.50">find_closest_points`find_closest_points::kd_tree..</text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="95.7538%" y="245" width="0.0205%" height="15" fill="rgb(214,192,32)" fg:x="4668" fg:w="1"/><text x="96.0038%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="95.7538%" y="229" width="0.0205%" height="15" fill="rgb(209,36,54)" fg:x="4668" fg:w="1"/><text x="96.0038%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.27%)</title><rect x="95.7744%" y="245" width="0.2667%" height="15" fill="rgb(220,10,11)" fg:x="4669" fg:w="13"/><text x="96.0244%" y="255.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (1,570 samples, 32.21%)</title><rect x="63.8564%" y="277" width="32.2051%" height="15" fill="rgb(221,106,17)" fg:x="3113" fg:w="1570"/><text x="64.1064%" y="287.50">find_closest_points`find_closest_points::kd_tree::co..</text></g><g><title>libsystem_malloc.dylib`free_medium (14 samples, 0.29%)</title><rect x="95.7744%" y="261" width="0.2872%" height="15" fill="rgb(251,142,44)" fg:x="4669" fg:w="14"/><text x="96.0244%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (1 samples, 0.02%)</title><rect x="96.0410%" y="245" width="0.0205%" height="15" fill="rgb(238,13,15)" fg:x="4682" fg:w="1"/><text x="96.2910%" y="255.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (1,670 samples, 34.26%)</title><rect x="61.9282%" y="293" width="34.2564%" height="15" fill="rgb(208,107,27)" fg:x="3019" fg:w="1670"/><text x="62.1782%" y="303.50">find_closest_points`find_closest_points::kd_tree::constr..</text></g><g><title>libsystem_malloc.dylib`free_medium (6 samples, 0.12%)</title><rect x="96.0615%" y="277" width="0.1231%" height="15" fill="rgb(205,136,37)" fg:x="4683" fg:w="6"/><text x="96.3115%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.12%)</title><rect x="96.0615%" y="261" width="0.1231%" height="15" fill="rgb(250,205,27)" fg:x="4683" fg:w="6"/><text x="96.3115%" y="271.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (2,035 samples, 41.74%)</title><rect x="54.4615%" y="357" width="41.7436%" height="15" fill="rgb(210,80,43)" fg:x="2655" fg:w="2035"/><text x="54.7115%" y="367.50">find_closest_points`find_closest_points::kd_tree::construct_kd_tree</text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (1,929 samples, 39.57%)</title><rect x="56.6359%" y="341" width="39.5692%" height="15" fill="rgb(247,160,36)" fg:x="2761" fg:w="1929"/><text x="56.8859%" y="351.50">find_closest_points`find_closest_points::kd_tree::construct_kd_tr..</text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (1,842 samples, 37.78%)</title><rect x="58.4205%" y="325" width="37.7846%" height="15" fill="rgb(234,13,49)" fg:x="2848" fg:w="1842"/><text x="58.6705%" y="335.50">find_closest_points`find_closest_points::kd_tree::construct_kd..</text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (1,752 samples, 35.94%)</title><rect x="60.2667%" y="309" width="35.9385%" height="15" fill="rgb(234,122,0)" fg:x="2938" fg:w="1752"/><text x="60.5167%" y="319.50">find_closest_points`find_closest_points::kd_tree::construc..</text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="96.1846%" y="293" width="0.0205%" height="15" fill="rgb(207,146,38)" fg:x="4689" fg:w="1"/><text x="96.4346%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (1 samples, 0.02%)</title><rect x="96.1846%" y="277" width="0.0205%" height="15" fill="rgb(207,177,25)" fg:x="4689" fg:w="1"/><text x="96.4346%" y="287.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (2,154 samples, 44.18%)</title><rect x="52.1231%" y="373" width="44.1846%" height="15" fill="rgb(211,178,42)" fg:x="2541" fg:w="2154"/><text x="52.3731%" y="383.50">find_closest_points`find_closest_points::kd_tree::construct_kd_tree</text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.10%)</title><rect x="96.2051%" y="357" width="0.1026%" height="15" fill="rgb(230,69,54)" fg:x="4690" fg:w="5"/><text x="96.4551%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.10%)</title><rect x="96.2051%" y="341" width="0.1026%" height="15" fill="rgb(214,135,41)" fg:x="4690" fg:w="5"/><text x="96.4551%" y="351.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (2,280 samples, 46.77%)</title><rect x="49.5795%" y="389" width="46.7692%" height="15" fill="rgb(237,67,25)" fg:x="2417" fg:w="2280"/><text x="49.8295%" y="399.50">find_closest_points`find_closest_points::kd_tree::construct_kd_tree</text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.04%)</title><rect x="96.3077%" y="373" width="0.0410%" height="15" fill="rgb(222,189,50)" fg:x="4695" fg:w="2"/><text x="96.5577%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="96.3077%" y="357" width="0.0410%" height="15" fill="rgb(245,148,34)" fg:x="4695" fg:w="2"/><text x="96.5577%" y="367.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (2,422 samples, 49.68%)</title><rect x="46.7487%" y="405" width="49.6821%" height="15" fill="rgb(222,29,6)" fg:x="2279" fg:w="2422"/><text x="46.9987%" y="415.50">find_closest_points`find_closest_points::kd_tree::construct_kd_tree</text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.08%)</title><rect x="96.3487%" y="389" width="0.0821%" height="15" fill="rgb(221,189,43)" fg:x="4697" fg:w="4"/><text x="96.5987%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.08%)</title><rect x="96.3487%" y="373" width="0.0821%" height="15" fill="rgb(207,36,27)" fg:x="4697" fg:w="4"/><text x="96.5987%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.08%)</title><rect x="96.3487%" y="357" width="0.0821%" height="15" fill="rgb(217,90,24)" fg:x="4697" fg:w="4"/><text x="96.5987%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.08%)</title><rect x="96.3487%" y="341" width="0.0821%" height="15" fill="rgb(224,66,35)" fg:x="4697" fg:w="4"/><text x="96.5987%" y="351.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (2,556 samples, 52.43%)</title><rect x="44.0821%" y="421" width="52.4308%" height="15" fill="rgb(221,13,50)" fg:x="2149" fg:w="2556"/><text x="44.3321%" y="431.50">find_closest_points`find_closest_points::kd_tree::construct_kd_tree</text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.08%)</title><rect x="96.4308%" y="405" width="0.0821%" height="15" fill="rgb(236,68,49)" fg:x="4701" fg:w="4"/><text x="96.6808%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.08%)</title><rect x="96.4308%" y="389" width="0.0821%" height="15" fill="rgb(229,146,28)" fg:x="4701" fg:w="4"/><text x="96.6808%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.08%)</title><rect x="96.4308%" y="373" width="0.0821%" height="15" fill="rgb(225,31,38)" fg:x="4701" fg:w="4"/><text x="96.6808%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.08%)</title><rect x="96.4308%" y="357" width="0.0821%" height="15" fill="rgb(250,208,3)" fg:x="4701" fg:w="4"/><text x="96.6808%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="96.5128%" y="405" width="0.0410%" height="15" fill="rgb(246,54,23)" fg:x="4705" fg:w="2"/><text x="96.7628%" y="415.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (2,687 samples, 55.12%)</title><rect x="41.4769%" y="437" width="55.1179%" height="15" fill="rgb(243,76,11)" fg:x="2022" fg:w="2687"/><text x="41.7269%" y="447.50">find_closest_points`find_closest_points::kd_tree::construct_kd_tree</text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.08%)</title><rect x="96.5128%" y="421" width="0.0821%" height="15" fill="rgb(245,21,50)" fg:x="4705" fg:w="4"/><text x="96.7628%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.04%)</title><rect x="96.5538%" y="405" width="0.0410%" height="15" fill="rgb(228,9,43)" fg:x="4707" fg:w="2"/><text x="96.8038%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.04%)</title><rect x="96.5538%" y="389" width="0.0410%" height="15" fill="rgb(208,100,47)" fg:x="4707" fg:w="2"/><text x="96.8038%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.04%)</title><rect x="96.5538%" y="373" width="0.0410%" height="15" fill="rgb(232,26,8)" fg:x="4707" fg:w="2"/><text x="96.8038%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="96.5949%" y="421" width="0.0410%" height="15" fill="rgb(216,166,38)" fg:x="4709" fg:w="2"/><text x="96.8449%" y="431.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (2,821 samples, 57.87%)</title><rect x="38.8308%" y="453" width="57.8667%" height="15" fill="rgb(251,202,51)" fg:x="1893" fg:w="2821"/><text x="39.0808%" y="463.50">find_closest_points`find_closest_points::kd_tree::construct_kd_tree</text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.10%)</title><rect x="96.5949%" y="437" width="0.1026%" height="15" fill="rgb(254,216,34)" fg:x="4709" fg:w="5"/><text x="96.8449%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_large (3 samples, 0.06%)</title><rect x="96.6359%" y="421" width="0.0615%" height="15" fill="rgb(251,32,27)" fg:x="4711" fg:w="3"/><text x="96.8859%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.06%)</title><rect x="96.6359%" y="405" width="0.0615%" height="15" fill="rgb(208,127,28)" fg:x="4711" fg:w="3"/><text x="96.8859%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.06%)</title><rect x="96.6359%" y="389" width="0.0615%" height="15" fill="rgb(224,137,22)" fg:x="4711" fg:w="3"/><text x="96.8859%" y="399.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (2,960 samples, 60.72%)</title><rect x="36.0615%" y="469" width="60.7179%" height="15" fill="rgb(254,70,32)" fg:x="1758" fg:w="2960"/><text x="36.3115%" y="479.50">find_closest_points`find_closest_points::kd_tree::construct_kd_tree</text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.08%)</title><rect x="96.6974%" y="453" width="0.0821%" height="15" fill="rgb(229,75,37)" fg:x="4714" fg:w="4"/><text x="96.9474%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.08%)</title><rect x="96.6974%" y="437" width="0.0821%" height="15" fill="rgb(252,64,23)" fg:x="4714" fg:w="4"/><text x="96.9474%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.08%)</title><rect x="96.6974%" y="421" width="0.0821%" height="15" fill="rgb(232,162,48)" fg:x="4714" fg:w="4"/><text x="96.9474%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.08%)</title><rect x="96.6974%" y="405" width="0.0821%" height="15" fill="rgb(246,160,12)" fg:x="4714" fg:w="4"/><text x="96.9474%" y="415.50"></text></g><g><title>find_closest_points`find_closest_points::kd_tree::KdTreeNode::construct_tree (3,079 samples, 63.16%)</title><rect x="33.7026%" y="501" width="63.1590%" height="15" fill="rgb(247,166,0)" fg:x="1643" fg:w="3079"/><text x="33.9526%" y="511.50">find_closest_points`find_closest_points::kd_tree::KdTreeNode::construct_tree</text></g><g><title>find_closest_points`find_closest_points::kd_tree::construct_kd_tree (3,079 samples, 63.16%)</title><rect x="33.7026%" y="485" width="63.1590%" height="15" fill="rgb(249,219,21)" fg:x="1643" fg:w="3079"/><text x="33.9526%" y="495.50">find_closest_points`find_closest_points::kd_tree::construct_kd_tree</text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.08%)</title><rect x="96.7795%" y="469" width="0.0821%" height="15" fill="rgb(205,209,3)" fg:x="4718" fg:w="4"/><text x="97.0295%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.08%)</title><rect x="96.7795%" y="453" width="0.0821%" height="15" fill="rgb(243,44,1)" fg:x="4718" fg:w="4"/><text x="97.0295%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.08%)</title><rect x="96.7795%" y="437" width="0.0821%" height="15" fill="rgb(206,159,16)" fg:x="4718" fg:w="4"/><text x="97.0295%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.08%)</title><rect x="96.7795%" y="421" width="0.0821%" height="15" fill="rgb(244,77,30)" fg:x="4718" fg:w="4"/><text x="97.0295%" y="431.50"></text></g><g><title>find_closest_points`rand::rngs::thread::thread_rng (5 samples, 0.10%)</title><rect x="97.3333%" y="485" width="0.1026%" height="15" fill="rgb(218,69,12)" fg:x="4745" fg:w="5"/><text x="97.5833%" y="495.50"></text></g><g><title>find_closest_points`find_closest_points::point::Point::random (53 samples, 1.09%)</title><rect x="96.8615%" y="501" width="1.0872%" height="15" fill="rgb(212,87,7)" fg:x="4722" fg:w="53"/><text x="97.1115%" y="511.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (25 samples, 0.51%)</title><rect x="97.4359%" y="485" width="0.5128%" height="15" fill="rgb(245,114,25)" fg:x="4750" fg:w="25"/><text x="97.6859%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (10 samples, 0.21%)</title><rect x="97.9487%" y="501" width="0.2051%" height="15" fill="rgb(210,61,42)" fg:x="4775" fg:w="10"/><text x="98.1987%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free_large (10 samples, 0.21%)</title><rect x="97.9487%" y="485" width="0.2051%" height="15" fill="rgb(211,52,33)" fg:x="4775" fg:w="10"/><text x="98.1987%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (10 samples, 0.21%)</title><rect x="97.9487%" y="469" width="0.2051%" height="15" fill="rgb(234,58,33)" fg:x="4775" fg:w="10"/><text x="98.1987%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (10 samples, 0.21%)</title><rect x="97.9487%" y="453" width="0.2051%" height="15" fill="rgb(220,115,36)" fg:x="4775" fg:w="10"/><text x="98.1987%" y="463.50"></text></g><g><title>find_closest_points`find_closest_points::main (4,852 samples, 99.53%)</title><rect x="0.0000%" y="517" width="99.5282%" height="15" fill="rgb(243,153,54)" fg:x="0" fg:w="4852"/><text x="0.2500%" y="527.50">find_closest_points`find_closest_points::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove (67 samples, 1.37%)</title><rect x="98.1538%" y="501" width="1.3744%" height="15" fill="rgb(251,47,18)" fg:x="4785" fg:w="67"/><text x="98.4038%" y="511.50"></text></g><g><title>find_closest_points`find_closest_points::point::Point::distance_sq (5 samples, 0.10%)</title><rect x="99.5282%" y="517" width="0.1026%" height="15" fill="rgb(242,102,42)" fg:x="4852" fg:w="5"/><text x="99.7782%" y="527.50"></text></g><g><title>find_closest_points`main (4,861 samples, 99.71%)</title><rect x="0.0000%" y="597" width="99.7128%" height="15" fill="rgb(234,31,38)" fg:x="0" fg:w="4861"/><text x="0.2500%" y="607.50">find_closest_points`main</text></g><g><title>find_closest_points`std::rt::lang_start (4,861 samples, 99.71%)</title><rect x="0.0000%" y="581" width="99.7128%" height="15" fill="rgb(221,117,51)" fg:x="0" fg:w="4861"/><text x="0.2500%" y="591.50">find_closest_points`std::rt::lang_start</text></g><g><title>find_closest_points`std::rt::lang_start_internal (4,861 samples, 99.71%)</title><rect x="0.0000%" y="565" width="99.7128%" height="15" fill="rgb(212,20,18)" fg:x="0" fg:w="4861"/><text x="0.2500%" y="575.50">find_closest_points`std::rt::lang_start_internal</text></g><g><title>find_closest_points`std::rt::lang_start::_{{closure}} (4,861 samples, 99.71%)</title><rect x="0.0000%" y="549" width="99.7128%" height="15" fill="rgb(245,133,36)" fg:x="0" fg:w="4861"/><text x="0.2500%" y="559.50">find_closest_points`std::rt::lang_start::_{{closure}}</text></g><g><title>find_closest_points`std::sys_common::backtrace::__rust_begin_short_backtrace (4,861 samples, 99.71%)</title><rect x="0.0000%" y="533" width="99.7128%" height="15" fill="rgb(212,6,19)" fg:x="0" fg:w="4861"/><text x="0.2500%" y="543.50">find_closest_points`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>find_closest_points`find_closest_points::point::Point::random (4 samples, 0.08%)</title><rect x="99.6308%" y="517" width="0.0821%" height="15" fill="rgb(218,1,36)" fg:x="4857" fg:w="4"/><text x="99.8808%" y="527.50"></text></g><g><title>dyld`start (4,862 samples, 99.73%)</title><rect x="0.0000%" y="613" width="99.7333%" height="15" fill="rgb(246,84,54)" fg:x="0" fg:w="4862"/><text x="0.2500%" y="623.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.02%)</title><rect x="99.7128%" y="597" width="0.0205%" height="15" fill="rgb(242,110,6)" fg:x="4861" fg:w="1"/><text x="99.9628%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="99.7128%" y="581" width="0.0205%" height="15" fill="rgb(214,47,5)" fg:x="4861" fg:w="1"/><text x="99.9628%" y="591.50"></text></g><g><title>all (4,875 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(218,159,25)" fg:x="0" fg:w="4875"/><text x="0.2500%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`__exit (13 samples, 0.27%)</title><rect x="99.7333%" y="613" width="0.2667%" height="15" fill="rgb(215,211,28)" fg:x="4862" fg:w="13"/><text x="99.9833%" y="623.50"></text></g></svg></svg>